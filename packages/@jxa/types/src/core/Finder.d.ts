
export namespace Finder {
    // Records

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface OpenOptionalParameter {
      /**
       * the application file to open the object with
       */
      using?: {
        [k: string]: any;
      };
      /**
       * the initial values for the properties, to be included with the open command sent to the application that opens the direct object
       */
      withProperties?: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintOptionalParameter {
      /**
       * optional properties to be included with the print command sent to the application that prints the direct object
       */
      withProperties?: {
        [k: string]: any;
      };
    }




    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * the class of the elements to be counted
       */
      each: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DataSizeOptionalParameter {
      /**
       * the data type for which the size is calculated
       */
      as?: {
        [k: string]: any;
      };
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * the new location for the object(s)
       */
      to?: {
        [k: string]: any;
      };
      /**
       * Specifies whether or not to replace items in the destination that have the same name as items being duplicated
       */
      replacing?: boolean;
      /**
       * Specifies whether or not to autoroute items (default is false). Only applies when copying to the system folder.
       */
      routingSuppressed?: boolean;
      /**
       * Specifies whether or not to copy permissions/ownership as is
       */
      exactCopy?: boolean;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * the class of the new element
       */
      new: {
        [k: string]: any;
      };
      /**
       * the location at which to insert the element
       */
      at: {
        [k: string]: any;
      };
      /**
       * when creating an alias file, the original item to create an alias to or when creating a file viewer window, the target of the window
       */
      to?: {
        [k: string]: any;
      };
      /**
       * the initial values for the properties of the element
       */
      withProperties?: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * the new location for the object(s)
       */
      to: {
        [k: string]: any;
      };
      /**
       * Specifies whether or not to replace items in the destination that have the same name as items being moved
       */
      replacing?: boolean;
      /**
       * Gives a list (in local window coordinates) of positions for the destination items
       */
      positionedAt?: {
        [k: string]: any;
      };
      /**
       * Specifies whether or not to autoroute items (default is false). Only applies when moving to the system folder.
       */
      routingSuppressed?: boolean;
    }




    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SortOptionalParameter {
      /**
       * the property to sort the items by (name, index, date, etc.)
       */
      by: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CleanUpOptionalParameter {
      /**
       * the order in which to clean up the objects (name, index, date, etc.)
       */
      by?: {
        [k: string]: any;
      };
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface EmptyOptionalParameter {
      /**
       * (obsolete)
       */
      security?: boolean;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface UpdateOptionalParameter {
      /**
       * only update if necessary (i.e. a finder window is open). default is false
       */
      necessity?: boolean;
      /**
       * register applications. default is true
       */
      registeringApplications?: boolean;
    }




}
export interface Finder {
    // Functions

     /**
      * Open the specified object(s)
      * @param directParameter list of objects to open
      * @param option
      * 
      */
     open(directParameter: any, option?: Finder.OpenOptionalParameter): void

     /**
      * Print the specified object(s)
      * @param directParameter list of objects to print
      * @param option
      * 
      */
     print(directParameter: any, option?: Finder.PrintOptionalParameter): void

     /**
      * Quit the Finder

      * 
      */
     quit(): void

     /**
      * Activate the specified window (or the Finder)
      * @param directParameter the window to activate (if not specified, activates the Finder)
      * 
      */
     activate(directParameter?: any, ): void

     /**
      * Close an object
      * @param directParameter the object to close
      * 
      */
     close(directParameter: any, ): void

     /**
      * Return the number of elements of a particular class within an object
      * @param directParameter the object whose elements are to be counted
      * @param option
      * @return the number of elements
      */
     count(directParameter: any, option?: Finder.CountOptionalParameter): number

     /**
      * Return the size in bytes of an object
      * @param directParameter the object whose data size is to be returned
      * @param option
      * @return the size of the object in bytes
      */
     dataSize(directParameter: any, option?: Finder.DataSizeOptionalParameter): number

     /**
      * Move an item from its container to the trash
      * @param directParameter the item to delete
      * @return to the item that was just deleted
      */
     delete(directParameter: any, ): any

     /**
      * Duplicate one or more object(s)
      * @param directParameter the object(s) to duplicate
      * @param option
      * @return to the duplicated object(s)
      */
     duplicate(directParameter: any, option?: Finder.DuplicateOptionalParameter): any

     /**
      * Verify if an object exists
      * @param directParameter the object in question
      * @return true if it exists, false if not
      */
     exists(directParameter: any, ): boolean

     /**
      * Make a new element

      * @param option
      * @return to the new object(s)
      */
     make(option?: Finder.MakeOptionalParameter): any

     /**
      * Move object(s) to a new location
      * @param directParameter the object(s) to move
      * @param option
      * @return to the object(s) after they have been moved
      */
     move(directParameter: any, option?: Finder.MoveOptionalParameter): any

     /**
      * Select the specified object(s)
      * @param directParameter the object to select
      * 
      */
     select(directParameter: any, ): void

     /**
      * Private event to open a virtual location
      * @param directParameter the location to open
      * 
      */
     openVirtualLocation(directParameter: string, ): void

     /**
      * (NOT AVAILABLE YET) Copy the selected items to the clipboard (the Finder must be the front application)

      * 
      */
     copy(): void

     /**
      * Return the specified object(s) in a sorted list
      * @param directParameter a list of finder objects to sort
      * @param option
      * @return the sorted items in their new order
      */
     sort(directParameter: any, option?: Finder.SortOptionalParameter): any

     /**
      * Arrange items in window nicely (only applies to open windows in icon view that are not kept arranged)
      * @param directParameter the window to clean up
      * @param option
      * 
      */
     cleanUp(directParameter: any, option?: Finder.CleanUpOptionalParameter): void

     /**
      * Eject the specified disk(s)
      * @param directParameter the disk(s) to eject
      * 
      */
     eject(directParameter?: any, ): void

     /**
      * Empty the trash
      * @param directParameter “empty” and “empty trash” both do the same thing
      * @param option
      * 
      */
     empty(directParameter?: any, option?: Finder.EmptyOptionalParameter): void

     /**
      * (NOT AVAILABLE) Erase the specified disk(s)
      * @param directParameter the items to erase
      * 
      */
     erase(directParameter: any, ): void

     /**
      * Bring the specified object(s) into view
      * @param directParameter the object to be made visible
      * 
      */
     reveal(directParameter: any, ): void

     /**
      * Update the display of the specified object(s) to match their on-disk representation
      * @param directParameter the item to update
      * @param option
      * 
      */
     update(directParameter: any, option?: Finder.UpdateOptionalParameter): void

     /**
      * Restart the computer

      * 
      */
     restart(): void

     /**
      * Shut Down the computer

      * 
      */
     shutDown(): void

     /**
      * Put the computer to sleep

      * 
      */
     sleep(): void
}
