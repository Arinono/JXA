
export namespace ImageEvents {
    // Records

    // Function options

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the disk item(s).
       */
      to: {
        [k: string]: any;
      };
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CloseOptionalParameter {
      /**
       * Specifies whether changes should be saved before closing.
       */
      saving?: {
        [k: string]: any;
      };
      /**
       * The file in which to save the image.
       */
      savingIn?: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CropOptionalParameter {
      /**
       * the width and height of the new image, respectively, in pixels, as a pair of integers
       */
      toDimensions: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface EmbedOptionalParameter {
      /**
       * the profile to embed in the image
       */
      withSource: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface FlipOptionalParameter {
      /**
       * flip horizontally
       */
      horizontal?: boolean;
      /**
       * flip vertically
       */
      vertical?: boolean;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MatchOptionalParameter {
      /**
       * the destination profile for the match
       */
      toDestination: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PadOptionalParameter {
      /**
       * the width and height of the new image, respectively, in pixels, as a pair of integers
       */
      toDimensions: {
        [k: string]: any;
      };
      /**
       * the RGB color values with which to pad the new image, as a list of integers
       */
      withPadColor?: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface RotateOptionalParameter {
      /**
       * rotate using an angle
       */
      toAngle: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SaveOptionalParameter {
      /**
       * file type in which to save the image ( default is to make no change )
       */
      as?: {
        [k: string]: any;
      };
      /**
       * Shall an icon be added? ( default is false )
       */
      icon?: boolean;
      /**
       * file path in which to save the image, in HFS or POSIX form
       */
      in?: {
        [k: string]: any;
      };
      /**
       * Are the bytes to be compressed with PackBits? ( default is false, applies only to TIFF )
       */
      packBits?: boolean;
      /**
       * specifies the compression level of the resultant file ( applies only to JPEG )
       */
      withCompressionLevel?: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ScaleOptionalParameter {
      /**
       * scale using a scalefactor
       */
      byFactor?: {
        [k: string]: any;
      };
      /**
       * scale using a max width/length
       */
      toSize?: number;
    }


}
export interface ImageEvents {
    // Functions

     /**
      * Delete disk item(s).
      * @param directParameter The disk item(s) to be deleted.
      * 
      */
     delete(directParameter: any, ): void

     /**
      * Move disk item(s) to a new location.
      * @param directParameter The disk item(s) to be moved.
      * @param option
      * @return undefined
      */
     move(directParameter: {}, option?: ImageEvents.MoveOptionalParameter): void

     /**
      * Open disk item(s) with the appropriate application.
      * @param directParameter The disk item(s) to be opened.
      * @return undefined
      */
     open(directParameter: {}, ): any

     /**
      * Close an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     close(directParameter: any, option?: ImageEvents.CloseOptionalParameter): void

     /**
      * Crop an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     crop(directParameter: any, option?: ImageEvents.CropOptionalParameter): void

     /**
      * Embed an image with an ICC profile
      * @param directParameter the object for the command
      * @param option
      * 
      */
     embed(directParameter: any, option?: ImageEvents.EmbedOptionalParameter): void

     /**
      * Flip an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     flip(directParameter: any, option?: ImageEvents.FlipOptionalParameter): void

     /**
      * Match an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     match(directParameter: any, option?: ImageEvents.MatchOptionalParameter): void

     /**
      * Pad an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     pad(directParameter: any, option?: ImageEvents.PadOptionalParameter): void

     /**
      * Rotate an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     rotate(directParameter: any, option?: ImageEvents.RotateOptionalParameter): void

     /**
      * Save an image to a file in one of various formats
      * @param directParameter the object for the command
      * @param option
      * @return undefined
      */
     save(directParameter: any, option?: ImageEvents.SaveOptionalParameter): any

     /**
      * Scale an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     scale(directParameter: any, option?: ImageEvents.ScaleOptionalParameter): void

     /**
      * Remove any embedded ICC profiles from an image
      * @param directParameter the object for the command
      * 
      */
     unembed(directParameter: any, ): void
}
