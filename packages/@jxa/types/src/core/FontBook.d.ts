
export namespace FontBook {
    // Records

    // Function options


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface QuitOptionalParameter {
      /**
       * Specifies whether changes should be saved before quitting.
       */
      saving?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CloseOptionalParameter {
      /**
       * Specifies whether changes should be saved before closing.
       */
      saving?: any;
      /**
       * The file in which to save the object.
       */
      savingIn?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * The location for the new object(s).
       */
      to: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object.
       */
      new: any;
      /**
       * The location at which to insert the object.
       */
      at?: any;
      /**
       * The initial data for the object.
       */
      withData?: any;
      /**
       * The initial values for properties of the object.
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the object(s).
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SaveOptionalParameter {
      /**
       * The file in which to save the object.
       */
      in?: string;
      /**
       * The file type in which to save the data.
       */
      as?: string;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SetOptionalParameter {
      /**
       * The new value.
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface AddOptionalParameter {
      /**
       * The container to which to add the object
       */
      to?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface RemoveOptionalParameter {
      /**
       * The container from which to remove the object
       */
      from?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ExportOptionalParameter {
      /**
       * The path to which to export the objeccts
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ValidateFontFileOptionalParameter {
      /**
       * Whether to generate summay.
       */
      generatingSummaryOnly?: boolean;
      /**
       * Whether to ignore erros.
       */
      ignorringErrors?: boolean;
      /**
       * Whether to do dynamic checking.
       */
      dynamicChecking?: boolean;
      /**
       * Additional parameters.
       */
      withProperties?: any;
    }

}
export interface FontBook {
    // Functions

     /**
      * Open an object.
      * @param directParameter list of objects to open
      * 
      */
     open(directParameter: any, ): void

     /**
      * Print an object.
      * @param directParameter list of objects to print
      * 
      */
     print(directParameter: any, ): void

     /**
      * Quit an application.

      * @param option
      * 
      */
     quit(option?: FontBook.QuitOptionalParameter): void

     /**
      * Close an object.
      * @param directParameter the object to close
      * @param option
      * 
      */
     close(directParameter: any, option?: FontBook.CloseOptionalParameter): void

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter the object whose elements are to be counted
      * @param option
      * @return the number of elements
      */
     count(directParameter: any, option?: FontBook.CountOptionalParameter): number

     /**
      * Delete an object.
      * @param directParameter the object to delete
      * 
      */
     delete(directParameter: any, ): void

     /**
      * Copy object(s) and put the copies at a new location.
      * @param directParameter the object(s) to duplicate
      * @param option
      * 
      */
     duplicate(directParameter: any, option?: FontBook.DuplicateOptionalParameter): void

     /**
      * Verify if an object exists.
      * @param directParameter the object in question
      * @return true if it exists, false if not
      */
     exists(directParameter: any, ): boolean

     /**
      * Get the data for an object.
      * @param directParameter undefined
      * @return undefined
      */
     get(directParameter: any, ): any

     /**
      * Make a new object.

      * @param option
      * @return to the new object
      */
     make(option?: FontBook.MakeOptionalParameter): any

     /**
      * Move object(s) to a new location.
      * @param directParameter the object(s) to move
      * @param option
      * 
      */
     move(directParameter: any, option?: FontBook.MoveOptionalParameter): void

     /**
      * Save an object.
      * @param directParameter the object to save, usually a document or window
      * @param option
      * 
      */
     save(directParameter: any, option?: FontBook.SaveOptionalParameter): void

     /**
      * Set an object's data.
      * @param directParameter undefined
      * @param option
      * 
      */
     set(directParameter: any, option?: FontBook.SetOptionalParameter): void

     /**
      * Add the given object to the container.
      * @param directParameter The object for the command
      * @param option
      * 
      */
     add(directParameter: any, option?: FontBook.AddOptionalParameter): void

     /**
      * Remove the given object from the container.
      * @param directParameter The object for the command
      * @param option
      * 
      */
     remove(directParameter: any, option?: FontBook.RemoveOptionalParameter): void

     /**
      * Export the given objects to the specified location.
      * @param directParameter The object for the command
      * @param option
      * 
      */
     export(directParameter: any, option?: FontBook.ExportOptionalParameter): void

     /**
      * Validate the given font file.
      * @param directParameter The file for the command
      * @param option
      * @return undefined
      */
     validateFontFile(directParameter: any, option?: FontBook.ValidateFontFileOptionalParameter): any
}
