
export namespace Photos {
    // Records

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: {
        [k: string]: any;
      };
    }




    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ImportOptionalParameter {
      /**
       * The album to import into.
       */
      into?: {
        [k: string]: any;
      };
      /**
       * Skip duplicate checking and import everything, defaults to false.
       */
      skipCheckDuplicates?: boolean;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ExportOptionalParameter {
      /**
       * The destination of the export.
       */
      to: {
        [k: string]: any;
      };
      /**
       * Export the original files if true, otherwise export rendered jpgs. defaults to false.
       */
      usingOriginals?: boolean;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object, allowed values are album or folder
       */
      new: {
        [k: string]: any;
      };
      /**
       * The name of the new object.
       */
      named?: {
        [k: string]: any;
      };
      /**
       * The parent folder for the new object.
       */
      at?: {
        [k: string]: any;
      };
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface AddOptionalParameter {
      /**
       * The album to add to.
       */
      to: {
        [k: string]: any;
      };
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface StartSlideshowOptionalParameter {
      /**
       * The media items to show.
       */
      using: {
        [k: string]: any;
      };
    }







}
export interface Photos {
    // Functions

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter The objects to be counted.
      * @param option
      * @return The count.
      */
     count(directParameter: any, option?: Photos.CountOptionalParameter): number

     /**
      * Verify that an object exists.
      * @param directParameter The object(s) to check.
      * @return Did the object(s) exist?
      */
     exists(directParameter: any, ): boolean

     /**
      * Open a photo library
      * @param directParameter The photo library to be opened.
      * 
      */
     open(directParameter: {}, ): void

     /**
      * Quit the application.

      * 
      */
     quit(): void

     /**
      * Import files into the library
      * @param directParameter The list of files to copy.
      * @param option
      * @return The imported media items in an array
      */
     import(directParameter: {}, option?: Photos.ImportOptionalParameter): void

     /**
      * Export media items to the specified location as files
      * @param directParameter The list of media items to export.
      * @param option
      * 
      */
     export(directParameter: {}, option?: Photos.ExportOptionalParameter): void

     /**
      * Duplicate an object. Only media items can be duplicated
      * @param directParameter The media item to duplicate
      * @return The duplicated media item
      */
     duplicate(directParameter: {}, ): any

     /**
      * Create a new object. Only new albums and folders can be created.

      * @param option
      * @return The new object.
      */
     make(option?: Photos.MakeOptionalParameter): void

     /**
      * Delete an object. Only albums and folders can be deleted.
      * @param directParameter The album or folder to delete.
      * 
      */
     delete(directParameter: {}, ): void

     /**
      * Add media items to an album.
      * @param directParameter The list of media items to add.
      * @param option
      * 
      */
     add(directParameter: {}, option?: Photos.AddOptionalParameter): void

     /**
      * Display an ad-hoc slide show from a list of media items, an album, a folder, or a moment

      * @param option
      * 
      */
     startSlideshow(option?: Photos.StartSlideshowOptionalParameter): void

     /**
      * End the currently-playing slideshow.

      * 
      */
     stopSlideshow(): void

     /**
      * Skip to next slide in currently-playing slideshow.

      * 
      */
     nextSlide(): void

     /**
      * Skip to previous slide in currently-playing slideshow.

      * 
      */
     previousSlide(): void

     /**
      * Pause the currently-playing slideshow.

      * 
      */
     pauseSlideshow(): void

     /**
      * Resume the currently-playing slideshow.

      * 
      */
     resumeSlideshow(): void

     /**
      * Show the image at path in the application, used to show spotlight search results
      * @param directParameter The full path to the image
      * 
      */
     spotlight(directParameter: {}, ): void
}
