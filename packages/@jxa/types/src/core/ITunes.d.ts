
export namespace iTunes {
    // Records
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintSettings {
      /**
       * the number of copies of a document to be printed
       */
      copies: number;
      /**
       * Should printed copies be collated?
       */
      collating: boolean;
      /**
       * the first page of the document to be printed
       */
      startingPage: number;
      /**
       * the last page of the document to be printed
       */
      endingPage: number;
      /**
       * number of logical pages laid across a physical page
       */
      pagesAcross: number;
      /**
       * number of logical pages laid out down a physical page
       */
      pagesDown: number;
      /**
       * how errors are handled
       */
      errorHandling: {
        [k: string]: any;
      };
      /**
       * the time at which the desktop printer should print the document
       */
      requestedPrintTime: {
        [k: string]: any;
      };
      /**
       * printer specific options
       */
      printerFeatures: {
        [k: string]: any;
      };
      /**
       * for fax number
       */
      faxNumber: {
        [k: string]: any;
      };
      /**
       * for target printer
       */
      targetPrinter: {
        [k: string]: any;
      };
    }

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintOptionalParameter {
      /**
       * Should the application show the print dialog
       */
      printDialog?: boolean;
      /**
       * the print settings
       */
      withProperties?: any;
      /**
       * the kind of printout desired
       */
      kind?: any;
      /**
       * name of theme to use for formatting the printout
       */
      theme?: string;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * the class of the elements to be counted. Keyword 'each' is optional in AppleScript
       */
      each: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * the new location for the object(s)
       */
      to?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * the class of the new element. Keyword 'new' is optional in AppleScript
       */
      new: any;
      /**
       * the location at which to insert the element
       */
      at?: any;
      /**
       * the initial values for the properties of the element
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * the new location for the playlist(s)
       */
      to: any;
    }





    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface AddOptionalParameter {
      /**
       * the location of the added file(s)
       */
      to?: any;
    }








    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PlayOptionalParameter {
      /**
       * If true, play this track once and then stop.
       */
      once?: boolean;
    }







    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SearchOptionalParameter {
      /**
       * the search text
       */
      for: string;
      /**
       * area to search (default is all)
       */
      only?: any;
    }








}
export interface iTunes {
    // Functions

     /**
      * Print the specified object(s)
      * @param directParameter list of objects to print
      * @param option
      * 
      */
     print(directParameter?: any, option?: iTunes.PrintOptionalParameter): void;

     /**
      * Close an object
      * @param directParameter the object to close
      * 
      */
     close(directParameter: any, ): void;

     /**
      * Return the number of elements of a particular class within an object
      * @param directParameter the object whose elements are to be counted
      * @param option
      * @return the number of elements
      */
     count(directParameter: any, option?: iTunes.CountOptionalParameter): number;

     /**
      * Delete an element from an object
      * @param directParameter the element to delete
      * 
      */
     delete(directParameter: any, ): void;

     /**
      * Duplicate one or more object(s)
      * @param directParameter the object(s) to duplicate
      * @param option
      * @return to the duplicated object(s)
      */
     duplicate(directParameter: any, option?: iTunes.DuplicateOptionalParameter): any;

     /**
      * Verify if an object exists
      * @param directParameter the object in question
      * @return true if it exists, false if not
      */
     exists(directParameter: any, ): boolean;

     /**
      * Make a new element

      * @param option
      * @return to the new object(s)
      */
     make(option?: iTunes.MakeOptionalParameter): any;

     /**
      * Move playlist(s) to a new location
      * @param directParameter the playlist(s) to move
      * @param option
      * 
      */
     move(directParameter: any, option?: iTunes.MoveOptionalParameter): void;

     /**
      * Open the specified object(s)
      * @param directParameter list of objects to open
      * 
      */
     open(directParameter: any, ): void;

     /**
      * Run iTunes

      * 
      */
     run(): void;

     /**
      * Quit iTunes

      * 
      */
     quit(): void;

     /**
      * Save the specified object(s)
      * @param directParameter the object(s) to save
      * 
      */
     save(directParameter: any, ): void;

     /**
      * add one or more files to a playlist
      * @param directParameter the file(s) to add
      * @param option
      * @return reference to added track(s)
      */
     add(directParameter: {}, option?: iTunes.AddOptionalParameter): any;

     /**
      * reposition to beginning of current track or go to previous track if already at start of current track

      * 
      */
     backTrack(): void;

     /**
      * convert one or more files or tracks
      * @param directParameter the file(s)/tracks(s) to convert
      * @return reference to converted track(s)
      */
     convert(directParameter: {}, ): any;

     /**
      * download a cloud track or playlist, or a podcast episode
      * @param directParameter the shared track, URL track or playlist to download
      * 
      */
     download(directParameter: any, ): void;

     /**
      * eject the specified iPod
      * @param directParameter the iPod to eject
      * 
      */
     eject(directParameter?: any, ): void;

     /**
      * skip forward in a playing track

      * 
      */
     fastForward(): void;

     /**
      * advance to the next track in the current playlist

      * 
      */
     nextTrack(): void;

     /**
      * pause playback

      * 
      */
     pause(): void;

     /**
      * play the current track or the specified track or file.
      * @param directParameter item to play
      * @param option
      * 
      */
     play(directParameter?: any, option?: iTunes.PlayOptionalParameter): void;

     /**
      * toggle the playing/paused state of the current track

      * 
      */
     playpause(): void;

     /**
      * return to the previous track in the current playlist

      * 
      */
     previousTrack(): void;

     /**
      * update file track information from the current information in the trackâ€™s file
      * @param directParameter the file track to update
      * 
      */
     refresh(directParameter: any, ): void;

     /**
      * disable fast forward/rewind and resume playback, if playing.

      * 
      */
     resume(): void;

     /**
      * reveal and select a track or playlist
      * @param directParameter the item to reveal
      * 
      */
     reveal(directParameter: any, ): void;

     /**
      * skip backwards in a playing track

      * 
      */
     rewind(): void;

     /**
      * search a playlist for tracks matching the search string. Identical to entering search text in the Search field in iTunes.
      * @param directParameter the playlist to search
      * @param option
      * @return reference to found track(s)
      */
     search(directParameter: any, option?: iTunes.SearchOptionalParameter): any;

     /**
      * select the specified object(s)
      * @param directParameter the object(s) to select
      * 
      */
     select(directParameter: any, ): void;

     /**
      * stop playback

      * 
      */
     stop(): void;

     /**
      * subscribe to a podcast feed
      * @param directParameter the URL of the feed to subscribe to
      * 
      */
     subscribe(directParameter: string, ): void;

     /**
      * update the specified iPod
      * @param directParameter the iPod to update
      * 
      */
     update(directParameter?: any, ): void;

     /**
      * update all subscribed podcast feeds

      * 
      */
     updateAllPodcasts(): void;

     /**
      * update podcast feed

      * 
      */
     updatePodcast(): void;

     /**
      * Opens a Music Store or audio stream URL
      * @param directParameter the URL to open
      * 
      */
     openLocation(directParameter?: string, ): void;
}
