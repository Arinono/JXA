
export namespace SystemEvents {
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * user account
  */
 export interface User {
   /**
    * user's full name
    */
   fullName: {
     [k: string]: any;
   };
   /**
    * path to user's home directory
    */
   homeDirectory: {
     [k: string]: any;
   };
   /**
    * user's short name
    */
   name: {
     [k: string]: any;
   };
   /**
    * path to user's picture. Can be set for current user only!
    */
   picturePath: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A collection of appearance preferences
  */
 export interface AppearancePreferencesObject {
   /**
    * the overall look of buttons, menus and windows
    */
   appearance: {
     [k: string]: any;
   };
   /**
    * Is font smoothing on?
    */
   fontSmoothing: boolean;
   /**
    * the font size at or below which font smoothing is turned off
    */
   fontSmoothingLimit: number;
   /**
    * the method used for smoothing fonts
    */
   fontSmoothingStyle: {
     [k: string]: any;
   };
   /**
    * color used for hightlighting selected text and lists
    */
   highlightColor: {
     [k: string]: any;
   };
   /**
    * the number of recent applications to track
    */
   recentApplicationsLimit: number;
   /**
    * the number of recent documents to track
    */
   recentDocumentsLimit: number;
   /**
    * the number of recent servers to track
    */
   recentServersLimit: number;
   /**
    * the action performed by clicking the scroll bar
    */
   scrollBarAction: {
     [k: string]: any;
   };
   /**
    * Is smooth scrolling used?
    */
   smoothScrolling: boolean;
   /**
    * use dark menu bar and dock
    */
   darkMode: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * user's CD and DVD insertion preferences
  */
 export interface CDAndDvdPreferencesObject {
   /**
    * the blank CD insertion preference
    */
   blankCD: {
     [k: string]: any;
   };
   /**
    * the blank DVD insertion preference
    */
   blankDVD: {
     [k: string]: any;
   };
   /**
    * the blank BD insertion preference
    */
   blankBD: {
     [k: string]: any;
   };
   /**
    * the music CD insertion preference
    */
   musicCD: {
     [k: string]: any;
   };
   /**
    * the picture CD insertion preference
    */
   pictureCD: {
     [k: string]: any;
   };
   /**
    * the video DVD insertion preference
    */
   videoDVD: {
     [k: string]: any;
   };
   /**
    * the video BD insertion preference
    */
   videoBD: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a specific insertion preference
  */
 export interface InsertionPreference {
   /**
    * application to launch or activate on the insertion of media
    */
   customApplication: {
     [k: string]: any;
   };
   /**
    * AppleScript to launch or activate on the insertion of media
    */
   customScript: {
     [k: string]: any;
   };
   /**
    * action to perform on media insertion
    */
   insertionAction: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * desktop picture settings
  */
 export interface Desktop {
   /**
    * name of the desktop
    */
   name: {
     [k: string]: any;
   };
   /**
    * unique identifier of the desktop
    */
   id: number;
   /**
    * number of seconds to wait between changing the desktop picture
    */
   changeInterval: {
     [k: string]: any;
   };
   /**
    * name of display on which this desktop appears
    */
   displayName: {
     [k: string]: any;
   };
   /**
    * path to file used as desktop picture
    */
   picture: {
     [k: string]: any;
   };
   /**
    * never, using interval, using login, after sleep
    */
   pictureRotation: number;
   /**
    * path to folder containing pictures for changing desktop background
    */
   picturesFolder: {
     [k: string]: any;
   };
   /**
    * turn on for random ordering of changing desktop pictures
    */
   randomOrder: boolean;
   /**
    * indicates whether the menu bar is translucent
    */
   translucentMenuBar: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * user's dock preferences
  */
 export interface DockPreferencesObject {
   /**
    * is the animation of opening applications on or off?
    */
   animate: boolean;
   /**
    * is autohiding the dock on or off?
    */
   autohide: boolean;
   /**
    * size/height of the items (between 0.0 (minimum) and 1.0 (maximum))
    */
   dockSize: {
     [k: string]: any;
   };
   /**
    * is magnification on or off?
    */
   magnification: boolean;
   /**
    * maximum magnification size when magnification is on (between 0.0 (minimum) and 1.0 (maximum))
    */
   magnificationSize: {
     [k: string]: any;
   };
   /**
    * minimization effect
    */
   minimizeEffect: {
     [k: string]: any;
   };
   /**
    * location on screen
    */
   screenEdge: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * an item to be launched or opened at login
  */
 export interface LoginItem {
   /**
    * Is the Login Item hidden when launched?
    */
   hidden: boolean;
   /**
    * the file type of the Login Item
    */
   kind: {
     [k: string]: any;
   };
   /**
    * the name of the Login Item
    */
   name: {
     [k: string]: any;
   };
   /**
    * the file system path to the Login Item
    */
   path: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A collection of settings for configuring a connection
  */
 export interface Configuration {
   /**
    * the name used to authenticate
    */
   accountName: {
     [k: string]: any;
   };
   /**
    * Is the configuration connected?
    */
   connected: boolean;
   /**
    * the unique identifier for the configuration
    */
   id: {
     [k: string]: any;
   };
   /**
    * the name of the configuration
    */
   name: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A collection of settings for a network interface
  */
 export interface Interface {
   /**
    * configure the interface speed, duplex, and mtu automatically?
    */
   automatic: boolean;
   /**
    * the duplex setting half | full | full with flow control
    */
   duplex: {
     [k: string]: any;
   };
   /**
    * the unique identifier for the interface
    */
   id: {
     [k: string]: any;
   };
   /**
    * the type of interface
    */
   kind: {
     [k: string]: any;
   };
   /**
    * the MAC address for the interface
    */
   MACAddress: {
     [k: string]: any;
   };
   /**
    * the packet size
    */
   mtu: number;
   /**
    * the name of the interface
    */
   name: {
     [k: string]: any;
   };
   /**
    * ethernet speed 10 | 100 | 1000
    */
   speed: number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A set of services
  */
 export interface Location {
   /**
    * the unique identifier for the location
    */
   id: {
     [k: string]: any;
   };
   /**
    * the name of the location
    */
   name: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the preferences for the current user's network
  */
 export interface NetworkPreferencesObject {
   /**
    * the current location
    */
   currentLocation: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A collection of settings for a network service
  */
 export interface Service {
   /**
    * Is the service active?
    */
   active: boolean;
   /**
    * the currently selected configuration
    */
   currentConfiguration: {
     [k: string]: any;
   };
   /**
    * the unique identifier for the service
    */
   id: {
     [k: string]: any;
   };
   /**
    * the interface the service is built on
    */
   interface: {
     [k: string]: any;
   };
   /**
    * the type of service
    */
   kind: number;
   /**
    * the name of the service
    */
   name: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * an installed screen saver
  */
 export interface ScreenSaver {
   /**
    * name of the screen saver module as displayed to the user
    */
   displayedName: {
     [k: string]: any;
   };
   /**
    * name of the screen saver module to be displayed
    */
   name: {
     [k: string]: any;
   };
   /**
    * path to the screen saver module
    */
   path: {
     [k: string]: any;
   };
   /**
    * effect to use when displaying picture-based screen savers (slideshow, collage, or mosaic)
    */
   pictureDisplayStyle: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * screen saver settings
  */
 export interface ScreenSaverPreferencesObject {
   /**
    * number of seconds of idle time before the screen saver starts; zero for never
    */
   delayInterval: number;
   /**
    * should the screen saver be shown only on the main screen?
    */
   mainScreenOnly: boolean;
   /**
    * is the screen saver running?
    */
   running: boolean;
   /**
    * should a clock appear over the screen saver?
    */
   showClock: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Data in Audio format
  */
 export interface AudioData {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file containing data in Audio format
  */
 export interface AudioFile {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a collection of security preferences
  */
 export interface SecurityPreferencesObject {
   /**
    * Is automatic login allowed?
    */
   automaticLogin: boolean;
   /**
    * Will the computer log out when inactive?
    */
   logOutWhenInactive: boolean;
   /**
    * The interval of inactivity after which the computer will log out
    */
   logOutWhenInactiveInterval: number;
   /**
    * Is a password required to unlock secure preferences?
    */
   requirePasswordToUnlock: boolean;
   /**
    * Is a password required to wake the computer from sleep or screen saver?
    */
   requirePasswordToWake: boolean;
   /**
    * Is secure virtual memory being used?
    */
   secureVirtualMemory: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An alias in the file system
  */
 export interface Alias {
   /**
    * the OSType identifying the application that created the alias
    */
   creatorType: {
     [k: string]: any;
   };
   /**
    * the application that will launch if the alias is opened
    */
   defaultApplication: {
     [k: string]: any;
   };
   /**
    * the OSType identifying the type of data contained in the alias
    */
   fileType: {
     [k: string]: any;
   };
   /**
    * The kind of alias, as shown in Finder
    */
   kind: {
     [k: string]: any;
   };
   /**
    * the version of the product (visible at the top of the "Get Info" window)
    */
   productVersion: {
     [k: string]: any;
   };
   /**
    * the short version of the application bundle referenced by the alias
    */
   shortVersion: {
     [k: string]: any;
   };
   /**
    * Is the alias a stationery pad?
    */
   stationery: boolean;
   /**
    * The type identifier of the alias
    */
   typeIdentifier: {
     [k: string]: any;
   };
   /**
    * the version of the application bundle referenced by the alias (visible at the bottom of the "Get Info" window)
    */
   version: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The Classic domain in the file system
  */
 export interface ClassicDomainObject {
   /**
    * The Apple Menu Items folder
    */
   appleMenuFolder: {
     [k: string]: any;
   };
   /**
    * The Control Panels folder
    */
   controlPanelsFolder: {
     [k: string]: any;
   };
   /**
    * The Control Strip Modules folder
    */
   controlStripModulesFolder: {
     [k: string]: any;
   };
   /**
    * The Classic Desktop folder
    */
   desktopFolder: {
     [k: string]: any;
   };
   /**
    * The Extensions folder
    */
   extensionsFolder: {
     [k: string]: any;
   };
   /**
    * The Fonts folder
    */
   fontsFolder: {
     [k: string]: any;
   };
   /**
    * The Launcher Items folder
    */
   launcherItemsFolder: {
     [k: string]: any;
   };
   /**
    * The Classic Preferences folder
    */
   preferencesFolder: {
     [k: string]: any;
   };
   /**
    * The Shutdown Items folder
    */
   shutdownFolder: {
     [k: string]: any;
   };
   /**
    * The StartupItems folder
    */
   startupItemsFolder: {
     [k: string]: any;
   };
   /**
    * The System folder
    */
   systemFolder: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A disk in the file system
  */
 export interface Disk {
   /**
    * the total number of bytes (free or used) on the disk
    */
   capacity: number;
   /**
    * Can the media be ejected (floppies, CD's, and so on)?
    */
   ejectable: boolean;
   /**
    * the file system format of this disk
    */
   format: {
     [k: string]: any;
   };
   /**
    * the number of free bytes left on the disk
    */
   freeSpace: number;
   /**
    * Ignore permissions on this disk?
    */
   ignorePrivileges: boolean;
   /**
    * Is the media a local volume (as opposed to a file server)?
    */
   localVolume: boolean;
   /**
    * the server on which the disk resides, AFP volumes only
    */
   server: {
     [k: string]: any;
   };
   /**
    * Is this disk the boot disk?
    */
   startup: boolean;
   /**
    * the zone in which the disk's server resides, AFP volumes only
    */
   zone: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An item stored in the file system
  */
 export interface DiskItem {
   /**
    * Is the disk item busy?
    */
   busyStatus: boolean;
   /**
    * the folder or disk which has this disk item as an element
    */
   container: {
     [k: string]: any;
   };
   /**
    * the date on which the disk item was created
    */
   creationDate: {
     [k: string]: any;
   };
   /**
    * the name of the disk item as displayed in the User Interface
    */
   displayedName: {
     [k: string]: any;
   };
   /**
    * the unique ID of the disk item
    */
   id: {
     [k: string]: any;
   };
   /**
    * the date on which the disk item was last modified
    */
   modificationDate: {
     [k: string]: any;
   };
   /**
    * the name of the disk item
    */
   name: {
     [k: string]: any;
   };
   /**
    * the extension portion of the name
    */
   nameExtension: {
     [k: string]: any;
   };
   /**
    * Is the disk item a package?
    */
   packageFolder: boolean;
   /**
    * the file system path of the disk item
    */
   path: {
     [k: string]: any;
   };
   /**
    * the actual space used by the disk item on disk
    */
   physicalSize: number;
   /**
    * the POSIX file system path of the disk item
    */
   POSIXPath: {
     [k: string]: any;
   };
   /**
    * the logical size of the disk item
    */
   size: number;
   /**
    * the URL of the disk item
    */
   URL: {
     [k: string]: any;
   };
   /**
    * Is the disk item visible?
    */
   visible: boolean;
   /**
    * the volume on which the disk item resides
    */
   volume: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A domain in the file system
  */
 export interface Domain {
   /**
    * The Application Support folder
    */
   applicationSupportFolder: {
     [k: string]: any;
   };
   /**
    * The Applications folder
    */
   applicationsFolder: {
     [k: string]: any;
   };
   /**
    * The Desktop Pictures folder
    */
   desktopPicturesFolder: {
     [k: string]: any;
   };
   /**
    * The Folder Action Scripts folder
    */
   folderActionScriptsFolder: {
     [k: string]: any;
   };
   /**
    * The Fonts folder
    */
   fontsFolder: {
     [k: string]: any;
   };
   /**
    * the unique identifier of the domain
    */
   id: {
     [k: string]: any;
   };
   /**
    * The Library folder
    */
   libraryFolder: {
     [k: string]: any;
   };
   /**
    * the name of the domain
    */
   name: {
     [k: string]: any;
   };
   /**
    * The Preferences folder
    */
   preferencesFolder: {
     [k: string]: any;
   };
   /**
    * The Scripting Additions folder
    */
   scriptingAdditionsFolder: {
     [k: string]: any;
   };
   /**
    * The Scripts folder
    */
   scriptsFolder: {
     [k: string]: any;
   };
   /**
    * The Shared Documents folder
    */
   sharedDocumentsFolder: {
     [k: string]: any;
   };
   /**
    * The Speakable Items folder
    */
   speakableItemsFolder: {
     [k: string]: any;
   };
   /**
    * The Utilities folder
    */
   utilitiesFolder: {
     [k: string]: any;
   };
   /**
    * The Automator Workflows folder
    */
   workflowsFolder: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file in the file system
  */
 export interface File {
   /**
    * the OSType identifying the application that created the file
    */
   creatorType: {
     [k: string]: any;
   };
   /**
    * the application that will launch if the file is opened
    */
   defaultApplication: {
     [k: string]: any;
   };
   /**
    * the OSType identifying the type of data contained in the file
    */
   fileType: {
     [k: string]: any;
   };
   /**
    * The kind of file, as shown in Finder
    */
   kind: {
     [k: string]: any;
   };
   /**
    * the version of the product (visible at the top of the "Get Info" window)
    */
   productVersion: {
     [k: string]: any;
   };
   /**
    * the short version of the file
    */
   shortVersion: {
     [k: string]: any;
   };
   /**
    * Is the file a stationery pad?
    */
   stationery: boolean;
   /**
    * The type identifier of the file
    */
   typeIdentifier: {
     [k: string]: any;
   };
   /**
    * the version of the file (visible at the bottom of the "Get Info" window)
    */
   version: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file package in the file system
  */
 export interface FilePackage {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A folder in the file system
  */
 export interface Folder {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The local domain in the file system
  */
 export interface LocalDomainObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The network domain in the file system
  */
 export interface NetworkDomainObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The system domain in the file system
  */
 export interface SystemDomainObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The user domain in the file system
  */
 export interface UserDomainObject {
   /**
    * The user's Desktop folder
    */
   desktopFolder: {
     [k: string]: any;
   };
   /**
    * The user's Documents folder
    */
   documentsFolder: {
     [k: string]: any;
   };
   /**
    * The user's Downloads folder
    */
   downloadsFolder: {
     [k: string]: any;
   };
   /**
    * The user's Favorites folder
    */
   favoritesFolder: {
     [k: string]: any;
   };
   /**
    * The user's Home folder
    */
   homeFolder: {
     [k: string]: any;
   };
   /**
    * The user's Movies folder
    */
   moviesFolder: {
     [k: string]: any;
   };
   /**
    * The user's Music folder
    */
   musicFolder: {
     [k: string]: any;
   };
   /**
    * The user's Pictures folder
    */
   picturesFolder: {
     [k: string]: any;
   };
   /**
    * The user's Public folder
    */
   publicFolder: {
     [k: string]: any;
   };
   /**
    * The user's Sites folder
    */
   sitesFolder: {
     [k: string]: any;
   };
   /**
    * The Temporary Items folder
    */
   temporaryItemsFolder: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Data in Movie format
  */
 export interface MovieData {
   /**
    * the bounding rectangle of the movie file
    */
   bounds: {
     [k: string]: any;
   };
   /**
    * the dimensions the movie has when it is not scaled
    */
   naturalDimensions: {
     [k: string]: any;
   };
   /**
    * the preview duration of the movie file
    */
   previewDuration: number;
   /**
    * the preview time of the movie file
    */
   previewTime: number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file containing data in Movie format
  */
 export interface MovieFile {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An action that can be performed on the UI element
  */
 export interface Action {
   /**
    * what the action does
    */
   description: {
     [k: string]: any;
   };
   /**
    * the name of the action
    */
   name: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A process launched from an application file
  */
 export interface ApplicationProcess {
   /**
    * a reference to the application file from which this process was launched
    */
   applicationFile: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An named data value associated with the UI element
  */
 export interface Attribute {
   /**
    * the name of the attribute
    */
   name: {
     [k: string]: any;
   };
   /**
    * Can the attribute be set?
    */
   settable: boolean;
   /**
    * the current value of the attribute
    */
   value: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A browser belonging to a window
  */
 export interface Browser {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A busy indicator belonging to a window
  */
 export interface BusyIndicator {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A button belonging to a window or scroll bar
  */
 export interface Button {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A checkbox belonging to a window
  */
 export interface Checkbox {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A color well belonging to a window
  */
 export interface ColorWell {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A column belonging to a table
  */
 export interface Column {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A combo box belonging to a window
  */
 export interface ComboBox {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A process launched from an desk accessory file
  */
 export interface DeskAccessoryProcess {
   /**
    * a reference to the desk accessory file from which this process was launched
    */
   deskAccessoryFile: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A drawer that may be extended from a window
  */
 export interface Drawer {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A group belonging to a window
  */
 export interface Group {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A grow area belonging to a window
  */
 export interface GrowArea {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An image belonging to a static text field
  */
 export interface Image {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A incrementor belonging to a window
  */
 export interface Incrementor {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A list belonging to a window
  */
 export interface List {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A menu belonging to a menu bar item
  */
 export interface Menu {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A menu bar belonging to a process
  */
 export interface MenuBar {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A menu bar item belonging to a menu bar
  */
 export interface MenuBarItem {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A menu button belonging to a window
  */
 export interface MenuButton {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A menu item belonging to a menu
  */
 export interface MenuItem {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A outline belonging to a window
  */
 export interface Outline {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A pop over belonging to a window
  */
 export interface PopOver {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A pop up button belonging to a window
  */
 export interface PopUpButton {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A process running on this computer
  */
 export interface Process {
   /**
    * Is the process high-level event aware (accepts open application, open document, print document, and quit)?
    */
   acceptsHighLevelEvents: boolean;
   /**
    * Does the process accept remote events?
    */
   acceptsRemoteEvents: boolean;
   /**
    * the architecture in which the process is running
    */
   architecture: {
     [k: string]: any;
   };
   /**
    * Does the process run exclusively in the background?
    */
   backgroundOnly: boolean;
   /**
    * the bundle identifier of the process' application file
    */
   bundleIdentifier: {
     [k: string]: any;
   };
   /**
    * Is the process running in the Classic environment?
    */
   classic: boolean;
   /**
    * the OSType of the creator of the process (the signature)
    */
   creatorType: {
     [k: string]: any;
   };
   /**
    * the name of the file from which the process was launched, as displayed in the User Interface
    */
   displayedName: {
     [k: string]: any;
   };
   /**
    * the file from which the process was launched
    */
   file: {
     [k: string]: any;
   };
   /**
    * the OSType of the file type of the process
    */
   fileType: {
     [k: string]: any;
   };
   /**
    * Is the process the frontmost process
    */
   frontmost: boolean;
   /**
    * Does the process have a scripting terminology, i.e., can it be scripted?
    */
   hasScriptingTerminology: boolean;
   /**
    * The unique identifier of the process
    */
   id: number;
   /**
    * the name of the process
    */
   name: {
     [k: string]: any;
   };
   /**
    * the number of bytes currently used in the process' partition
    */
   partitionSpaceUsed: number;
   /**
    * the short name of the file from which the process was launched
    */
   shortName: {
     [k: string]: any;
   };
   /**
    * the size of the partition with which the process was launched
    */
   totalPartitionSize: number;
   /**
    * The Unix process identifier of a process running in the native environment, or -1 for a process running in the Classic environment
    */
   unixId: number;
   /**
    * Is the process' layer visible?
    */
   visible: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A progress indicator belonging to a window
  */
 export interface ProgressIndicator {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A radio button belonging to a window
  */
 export interface RadioButton {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A radio button group belonging to a window
  */
 export interface RadioGroup {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A relevance indicator belonging to a window
  */
 export interface RelevanceIndicator {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A row belonging to a table
  */
 export interface Row {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A scroll area belonging to a window
  */
 export interface ScrollArea {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A scroll bar belonging to a window
  */
 export interface ScrollBar {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A sheet displayed over a window
  */
 export interface Sheet {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A slider belonging to a window
  */
 export interface Slider {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A splitter belonging to a window
  */
 export interface Splitter {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A splitter group belonging to a window
  */
 export interface SplitterGroup {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A static text field belonging to a window
  */
 export interface StaticText {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A tab group belonging to a window
  */
 export interface TabGroup {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A table belonging to a window
  */
 export interface Table {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A text area belonging to a window
  */
 export interface TextArea {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A text field belonging to a window
  */
 export interface TextField {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A toolbar belonging to a window
  */
 export interface Toolbar {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A piece of the user interface of a process
  */
 export interface UIElement {
   /**
    * a more complete description of the UI element and its capabilities
    */
   accessibilityDescription: {
     [k: string]: any;
   };
   /**
    * the class of the UI Element, which identifies it function
    */
   class: {
     [k: string]: any;
   };
   /**
    * the accessibility description, if available; otherwise, the role description
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the UI element enabled? ( Does it accept clicks? )
    */
   enabled: {
     [k: string]: any;
   };
   /**
    * a list of every UI element contained in this UI element and its child UI elements, to the limits of the tree
    */
   entireContents: {
     [k: string]: any;
   };
   /**
    * Is the focus on this UI element?
    */
   focused: {
     [k: string]: any;
   };
   /**
    * an elaborate description of the UI element and its capabilities
    */
   help: {
     [k: string]: any;
   };
   /**
    * the maximum value that the UI element can take on
    */
   maximumValue: {
     [k: string]: any;
   };
   /**
    * the minimum value that the UI element can take on
    */
   minimumValue: {
     [k: string]: any;
   };
   /**
    * the name of the UI Element, which identifies it within its container
    */
   name: {
     [k: string]: any;
   };
   /**
    * the orientation of the UI element
    */
   orientation: {
     [k: string]: any;
   };
   /**
    * the position of the UI element
    */
   position: {
     [k: string]: any;
   };
   /**
    * an encoded description of the UI element and its capabilities
    */
   role: {
     [k: string]: any;
   };
   /**
    * a more complete description of the UI element's role
    */
   roleDescription: {
     [k: string]: any;
   };
   /**
    * Is the UI element selected?
    */
   selected: {
     [k: string]: any;
   };
   /**
    * the size of the UI element
    */
   size: {
     [k: string]: any;
   };
   /**
    * an encoded description of the UI element and its capabilities
    */
   subrole: {
     [k: string]: any;
   };
   /**
    * the title of the UI element as it appears on the screen
    */
   title: {
     [k: string]: any;
   };
   /**
    * the current value of the UI element
    */
   value: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A value indicator ( thumb or slider ) belonging to a scroll bar
  */
 export interface ValueIndicator {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file containing data in Property List format
  */
 export interface PropertyListFile {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A data blob
  */
 export interface Data {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A unit of data in Property List format
  */
 export interface PropertyListItem {
   /**
    * the kind of data stored in the property list item: boolean/data/date/list/number/record/string
    */
   kind: {
     [k: string]: any;
   };
   /**
    * the name of the property list item ( if any )
    */
   name: {
     [k: string]: any;
   };
   /**
    * the text representation of the property list data
    */
   text: {
     [k: string]: any;
   };
   /**
    * the value of the property list item
    */
   value: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A unit of user data in a QuickTime file
  */
 export interface Annotation {
   /**
    * the full text of the annotation
    */
   fullText: {
     [k: string]: any;
   };
   /**
    * the unique identifier of the annotation
    */
   id: {
     [k: string]: any;
   };
   /**
    * the name of the annotation
    */
   name: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Data in QuickTime format
  */
 export interface QuickTimeData {
   /**
    * will the movie automatically start playing? (saved with QuickTime file)
    */
   autoPlay: boolean;
   /**
    * will the movie automatically start presenting? (saved with QuickTime file)
    */
   autoPresent: boolean;
   /**
    * will the player automatically quit when done playing? (saved with QuickTime file)
    */
   autoQuitWhenDone: boolean;
   /**
    * the creation time of the QuickTime file
    */
   creationTime: {
     [k: string]: any;
   };
   /**
    * the size of the QuickTime file data
    */
   dataSize: number;
   /**
    * the duration of the QuickTime file, in terms of the time scale
    */
   duration: number;
   /**
    * the internet location to open when clicking on the movie (overrides track hrefs)
    */
   href: {
     [k: string]: any;
   };
   /**
    * keep playing the movie in a loop?
    */
   looping: boolean;
   /**
    * the modification time of the QuickTime file
    */
   modificationTime: {
     [k: string]: any;
   };
   /**
    * the preferred rate of the QuickTime file
    */
   preferredRate: number;
   /**
    * the preferred volume of the QuickTime file
    */
   preferredVolume: number;
   /**
    * mode in which the movie will be presented
    */
   presentationMode: {
     [k: string]: any;
   };
   /**
    * size at which the movie will be presented
    */
   presentationSize: {
     [k: string]: any;
   };
   /**
    * is this a stored streaming movie?
    */
   storedStream: boolean;
   /**
    * the time scale of the QuickTime file
    */
   timeScale: number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file containing data in QuickTime format
  */
 export interface QuickTimeFile {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A track in a QuickTime file
  */
 export interface Track {
   /**
    * the number of channels in the audio
    */
   audioChannelCount: number;
   /**
    * can the track be heard?
    */
   audioCharacteristic: boolean;
   /**
    * the sample rate of the audio in kHz
    */
   audioSampleRate: {
     [k: string]: any;
   };
   /**
    * the size of uncompressed audio samples in bits
    */
   audioSampleSize: number;
   /**
    * the creation time of the track
    */
   creationTime: {
     [k: string]: any;
   };
   /**
    * the data format
    */
   dataFormat: {
     [k: string]: any;
   };
   /**
    * the data rate (bytes/sec) of the track
    */
   dataRate: number;
   /**
    * the size of the track data
    */
   dataSize: number;
   /**
    * the current dimensions of the track
    */
   dimensions: {
     [k: string]: any;
   };
   /**
    * the duration of the track, in terms of the time scale
    */
   duration: number;
   /**
    * should this track be used when the movie is playing?
    */
   enabled: boolean;
   /**
    * is the track high quality?
    */
   highQuality: boolean;
   /**
    * the internet location to open when clicking on the track
    */
   href: {
     [k: string]: any;
   };
   /**
    * the name of the media in the track, in the current language (e.g., 'Sound', 'Video', 'Text', ...)
    */
   kind: {
     [k: string]: any;
   };
   /**
    * the modification time of the track
    */
   modificationTime: {
     [k: string]: any;
   };
   /**
    * the name of the track
    */
   name: {
     [k: string]: any;
   };
   /**
    * the time delay before this track starts playing
    */
   startTime: number;
   /**
    * the type of media in the track (e.g., 'soun', 'vide', 'text', ...)
    */
   type: {
     [k: string]: any;
   };
   /**
    * deprecated: use "type" instead ( included only to resolve a terminology conflict, script text will be updated upon compilation )
    */
   typeClass: {
     [k: string]: any;
   };
   /**
    * the color depth of the video
    */
   videoDepth: number;
   /**
    * can the track be seen?
    */
   visualCharacteristic: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A named value associated with a unit of data in XML format
  */
 export interface XMLAttribute {
   /**
    * the name of the XML attribute
    */
   name: {
     [k: string]: any;
   };
   /**
    * the value of the XML attribute
    */
   value: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Data in XML format
  */
 export interface XMLData {
   /**
    * the unique identifier of the XML data
    */
   id: {
     [k: string]: any;
   };
   /**
    * the name of the XML data
    */
   name: {
     [k: string]: any;
   };
   /**
    * the text representation of the XML data
    */
   text: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A unit of data in XML format
  */
 export interface XMLElement {
   /**
    * the unique identifier of the XML element
    */
   id: {
     [k: string]: any;
   };
   /**
    * the name of the XML element
    */
   name: {
     [k: string]: any;
   };
   /**
    * the value of the XML element
    */
   value: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file containing data in XML format
  */
 export interface XMLFile {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface PrintSettings {
   /**
    * the number of copies of a document to be printed
    */
   copies: number;
   /**
    * Should printed copies be collated?
    */
   collating: boolean;
   /**
    * the first page of the document to be printed
    */
   startingPage: number;
   /**
    * the last page of the document to be printed
    */
   endingPage: number;
   /**
    * number of logical pages laid across a physical page
    */
   pagesAcross: number;
   /**
    * number of logical pages laid out down a physical page
    */
   pagesDown: number;
   /**
    * the time at which the desktop printer should print the document
    */
   requestedPrintTime: {
     [k: string]: any;
   };
   /**
    * how errors are handled
    */
   errorHandling: {
     [k: string]: any;
   };
   /**
    * for fax number
    */
   faxNumber: {
     [k: string]: any;
   };
   /**
    * for target printer
    */
   targetPrinter: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A class within a suite within a scripting definition
  */
 export interface ScriptingClass {
   /**
    * The name of the class
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the class
    */
   id: {
     [k: string]: any;
   };
   /**
    * The description of the class
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the class hidden?
    */
   hidden: boolean;
   /**
    * The plural name of the class
    */
   pluralName: {
     [k: string]: any;
   };
   /**
    * The name of the suite to which this class belongs
    */
   suiteName: {
     [k: string]: any;
   };
   /**
    * The class from which this class inherits
    */
   superclass: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A command within a suite within a scripting definition
  */
 export interface ScriptingCommand {
   /**
    * The name of the command
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the command
    */
   id: {
     [k: string]: any;
   };
   /**
    * The description of the command
    */
   description: {
     [k: string]: any;
   };
   /**
    * The direct parameter of the command
    */
   directParameter: {
     [k: string]: any;
   };
   /**
    * Is the command hidden?
    */
   hidden: boolean;
   /**
    * The object or data returned by this command
    */
   scriptingResult: {
     [k: string]: any;
   };
   /**
    * The name of the suite to which this command belongs
    */
   suiteName: {
     [k: string]: any;
   };
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The scripting definition of the System Events applicaation
  */
 export interface ScriptingDefinitionObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An element within a class within a suite within a scripting definition
  */
 export interface ScriptingElement {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An enumeration within a suite within a scripting definition
  */
 export interface ScriptingEnumeration {
   /**
    * The name of the enumeration
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the enumeration
    */
   id: {
     [k: string]: any;
   };
   /**
    * Is the enumeration hidden?
    */
   hidden: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An enumerator within an enumeration within a suite within a scripting definition
  */
 export interface ScriptingEnumerator {
   /**
    * The name of the enumerator
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the enumerator
    */
   id: {
     [k: string]: any;
   };
   /**
    * The description of the enumerator
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the enumerator hidden?
    */
   hidden: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A parameter within a command within a suite within a scripting definition
  */
 export interface ScriptingParameter {
   /**
    * The name of the parameter
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the parameter
    */
   id: {
     [k: string]: any;
   };
   /**
    * The description of the parameter
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the parameter hidden?
    */
   hidden: boolean;
   /**
    * The kind of object or data specified by this parameter
    */
   kind: {
     [k: string]: any;
   };
   /**
    * Is the parameter optional?
    */
   optional: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A property within a class within a suite within a scripting definition
  */
 export interface ScriptingProperty {
   /**
    * The name of the property
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the property
    */
   id: {
     [k: string]: any;
   };
   /**
    * The type of access to this property
    */
   access: {
     [k: string]: any;
   };
   /**
    * The description of the property
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the property's value an enumerator?
    */
   enumerated: boolean;
   /**
    * Is the property hidden?
    */
   hidden: boolean;
   /**
    * The kind of object or data returned by this property
    */
   kind: {
     [k: string]: any;
   };
   /**
    * Is the property's value a list?
    */
   listed: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The result of a command within a suite within a scripting definition
  */
 export interface ScriptingResultObject {
   /**
    * The description of the property
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the scripting result's value an enumerator?
    */
   enumerated: boolean;
   /**
    * The kind of object or data returned by this property
    */
   kind: {
     [k: string]: any;
   };
   /**
    * Is the scripting result's value a list?
    */
   listed: boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A suite within a scripting definition
  */
 export interface ScriptingSuite {
   /**
    * The name of the suite
    */
   name: {
     [k: string]: any;
   };
   /**
    * The unique identifier of the suite
    */
   id: {
     [k: string]: any;
   };
   /**
    * The description of the suite
    */
   description: {
     [k: string]: any;
   };
   /**
    * Is the suite hidden?
    */
   hidden: boolean;
 }
    
    // Records

    // Function options








    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the disk item(s).
       */
      to: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface RestartOptionalParameter {
      /**
       * Is the user defined state saving preference followed?
       */
      stateSavingPreference?: boolean;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ShutDownOptionalParameter {
      /**
       * Is the user defined state saving preference followed?
       */
      stateSavingPreference?: boolean;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ClickOptionalParameter {
      /**
       * when sent to a "process" object, the { x, y } location at which to click, in global coordinates
       */
      at?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface KeyCodeOptionalParameter {
      /**
       * modifiers with which the key codes are to be entered
       */
      using?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface KeystrokeOptionalParameter {
      /**
       * modifiers with which the keystrokes are to be entered
       */
      using?: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface AttachActionToOptionalParameter {
      /**
       * a file containing the script to attach
       */
      using: string;
    }





    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DoFolderActionOptionalParameter {
      /**
       * the folder action message to process
       */
      folderActionCode: any;
      /**
       * a list of items for the folder action message to process
       */
      withItemList?: any;
      /**
       * the new window size for the folder action message to process
       */
      withWindowSize?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface EditActionOfOptionalParameter {
      /**
       * ...or the name of the action to edit
       */
      usingActionName?: string;
      /**
       * the index number of the action to edit...
       */
      usingActionNumber?: number;
    }





    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface RemoveActionFromOptionalParameter {
      /**
       * ...or the name of the action to remove
       */
      usingActionName?: string;
      /**
       * the index number of the action to remove...
       */
      usingActionNumber?: number;
    }

}
export interface SystemEvents {
    // Functions

     /**
      * Discard the results of a bounded update session with one or more files.

      * 
      */
     abortTransaction(): void;

     /**
      * Begin a bounded update session with one or more files.

      * @return undefined
      */
     beginTransaction(): number;

     /**
      * Apply the results of a bounded update session with one or more files.

      * 
      */
     endTransaction(): void;

     /**
      * connect a configuration or service
      * @param directParameter a configuration or service
      * @return undefined
      */
     connect(directParameter: {}, ): SystemEvents.Configuration;

     /**
      * disconnect a configuration or service
      * @param directParameter a configuration or service
      * @return undefined
      */
     disconnect(directParameter: {}, ): SystemEvents.Configuration;

     /**
      * start the screen saver
      * @param directParameter the object for the command
      * 
      */
     start(directParameter: {}, ): void;

     /**
      * stop the screen saver
      * @param directParameter the object for the command
      * 
      */
     stop(directParameter: {}, ): void;

     /**
      * Delete disk item(s).
      * @param directParameter The disk item(s) to be deleted.
      * 
      */
     delete(directParameter: SystemEvents.DiskItem, ): void;

     /**
      * Move disk item(s) to a new location.
      * @param directParameter The disk item(s) to be moved.
      * @param option
      * @return undefined
      */
     move(directParameter: {}, option?: SystemEvents.MoveOptionalParameter): void;

     /**
      * Open disk item(s) with the appropriate application.
      * @param directParameter The disk item(s) to be opened.
      * @return undefined
      */
     open(directParameter: {}, ): SystemEvents.File;

     /**
      * Log out the current user

      * 
      */
     logOut(): void;

     /**
      * Restart the computer

      * @param option
      * 
      */
     restart(option?: SystemEvents.RestartOptionalParameter): void;

     /**
      * Shut Down the computer

      * @param option
      * 
      */
     shutDown(option?: SystemEvents.ShutDownOptionalParameter): void;

     /**
      * Put the computer to sleep

      * 
      */
     sleep(): void;

     /**
      * cause the target process to behave as if the UI element were clicked
      * @param directParameter The UI element to be clicked.
      * @param option
      * @return undefined
      */
     click(directParameter?: SystemEvents.UIElement, option?: SystemEvents.ClickOptionalParameter): void;

     /**
      * cause the target process to behave as if key codes were entered
      * @param directParameter The key code(s) to be sent. May be a list.
      * @param option
      * 
      */
     keyCode(directParameter: {}, option?: SystemEvents.KeyCodeOptionalParameter): void;

     /**
      * cause the target process to behave as if keystrokes were entered
      * @param directParameter The keystrokes to be sent.
      * @param option
      * 
      */
     keystroke(directParameter: string, option?: SystemEvents.KeystrokeOptionalParameter): void;

     /**
      * cause the target process to behave as if the action were applied to its UI element
      * @param directParameter The action to be performed.
      * @return undefined
      */
     perform(directParameter: SystemEvents.Action, ): SystemEvents.Action;

     /**
      * set the selected property of the UI element
      * @param directParameter The UI element to be selected.
      * @return undefined
      */
     select(directParameter: SystemEvents.UIElement, ): SystemEvents.UIElement;

     /**
      * Attach an action to a folder
      * @param directParameter the object for the command
      * @param option
      * @return undefined
      */
     attachActionTo(directParameter: any, option?: SystemEvents.AttachActionToOptionalParameter): any;

     /**
      * List the actions attached to a folder
      * @param directParameter the object for the command
      * @return undefined
      */
     attachedScripts(directParameter: any, ): void;

     /**
      * cause the target process to behave as if the UI element were cancelled
      * @param directParameter the object for the command
      * @return undefined
      */
     cancel(directParameter: any, ): SystemEvents.UIElement;

     /**
      * cause the target process to behave as if the UI element were confirmed
      * @param directParameter the object for the command
      * @return undefined
      */
     confirm(directParameter: any, ): SystemEvents.UIElement;

     /**
      * cause the target process to behave as if the UI element were decremented
      * @param directParameter the object for the command
      * @return undefined
      */
     decrement(directParameter: any, ): SystemEvents.UIElement;

     /**
      * Send a folder action code to a folder action script
      * @param directParameter the object for the command
      * @param option
      * 
      */
     doFolderAction(directParameter: any, option?: SystemEvents.DoFolderActionOptionalParameter): void;

     /**
      * Execute an OSA script.
      * @param directParameter the object for the command
      * @return undefined
      */
     doScript(directParameter: {}, ): any;

     /**
      * Edit an action of a folder
      * @param directParameter the object for the command
      * @param option
      * @return undefined
      */
     editActionOf(directParameter: any, option?: SystemEvents.EditActionOfOptionalParameter): SystemEvents.File;

     /**
      * cause the target process to behave as if the UI element were incremented
      * @param directParameter the object for the command
      * @return undefined
      */
     increment(directParameter: any, ): SystemEvents.UIElement;

     /**
      * cause the target process to behave as if keys were held down
      * @param directParameter the object for the command
      * 
      */
     keyDown(directParameter: any, ): void;

     /**
      * cause the target process to behave as if keys were released
      * @param directParameter the object for the command
      * 
      */
     keyUp(directParameter: any, ): void;

     /**
      * cause the target process to behave as if the UI element were picked
      * @param directParameter the object for the command
      * @return undefined
      */
     pick(directParameter: any, ): SystemEvents.UIElement;

     /**
      * Remove a folder action from a folder
      * @param directParameter the object for the command
      * @param option
      * @return undefined
      */
     removeActionFrom(directParameter: any, option?: SystemEvents.RemoveActionFromOptionalParameter): any;
}
