
// Records

// Functions


/**
 * Discard the results of a bounded update session with one or more files.

 * 
 */
export declare function abortTransaction(): void


/**
 * Begin a bounded update session with one or more files.

 * @return undefined
 */
export declare function beginTransaction(): number


/**
 * Apply the results of a bounded update session with one or more files.

 * 
 */
export declare function endTransaction(): void


/**
 * connect a configuration or service
 * @param directParameter a configuration or service
 * @return undefined
 */
export declare function connect(directParameter: {}, ): any


/**
 * disconnect a configuration or service
 * @param directParameter a configuration or service
 * @return undefined
 */
export declare function disconnect(directParameter: {}, ): any


/**
 * start the screen saver
 * @param directParameter the object for the command
 * 
 */
export declare function start(directParameter: {}, ): void


/**
 * stop the screen saver
 * @param directParameter the object for the command
 * 
 */
export declare function stop(directParameter: {}, ): void


/**
 * Delete disk item(s).
 * @param directParameter The disk item(s) to be deleted.
 */
declare function _delete(directParameter: any): void
export { _delete as delete };


/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface MoveOptionalParameter {
  /**
   * The new location for the disk item(s).
   */
  to?: {
    [k: string]: any;
  };
}

/**
 * Move disk item(s) to a new location.
 * @param directParameter The disk item(s) to be moved.
 * @return undefined
 */
export declare function move(directParameter: {}, option?: MoveOptionalParameter): void


/**
 * Open disk item(s) with the appropriate application.
 * @param directParameter The disk item(s) to be opened.
 * @return undefined
 */
export declare function open(directParameter: {}, ): any


/**
 * Log out the current user

 * 
 */
export declare function logOut(): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface RestartOptionalParameter {
  /**
   * Is the user defined state saving preference followed?
   */
  stateSavingPreference: boolean;
}

/**
 * Restart the computer

 * 
 */
export declare function restart(option?: RestartOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ShutDownOptionalParameter {
  /**
   * Is the user defined state saving preference followed?
   */
  stateSavingPreference: boolean;
}

/**
 * Shut Down the computer

 * 
 */
export declare function shutDown(option?: ShutDownOptionalParameter): void


/**
 * Put the computer to sleep

 * 
 */
export declare function sleep(): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ClickOptionalParameter {
  /**
   * when sent to a "process" object, the { x, y } location at which to click, in global coordinates
   */
  at: {
    [k: string]: any;
  };
}

/**
 * cause the target process to behave as if the UI element were clicked
 * @param directParameter The UI element to be clicked.
 * @return undefined
 */
export declare function click(directParameter?: any, option?: ClickOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface KeyCodeOptionalParameter {
  /**
   * modifiers with which the key codes are to be entered
   */
  using: {
    [k: string]: any;
  };
}

/**
 * cause the target process to behave as if key codes were entered
 * @param directParameter The key code(s) to be sent. May be a list.
 * 
 */
export declare function keyCode(directParameter: {}, option?: KeyCodeOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface KeystrokeOptionalParameter {
  /**
   * modifiers with which the keystrokes are to be entered
   */
  using: {
    [k: string]: any;
  };
}

/**
 * cause the target process to behave as if keystrokes were entered
 * @param directParameter The keystrokes to be sent.
 * 
 */
export declare function keystroke(directParameter: string, option?: KeystrokeOptionalParameter): void


/**
 * cause the target process to behave as if the action were applied to its UI element
 * @param directParameter The action to be performed.
 * @return undefined
 */
export declare function perform(directParameter: any, ): any


/**
 * set the selected property of the UI element
 * @param directParameter The UI element to be selected.
 * @return undefined
 */
export declare function select(directParameter: any, ): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface AttachActionToOptionalParameter {
  /**
   * a file containing the script to attach
   */
  using?: {
    [k: string]: any;
  };
}

/**
 * Attach an action to a folder
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function attachActionTo(directParameter: any, option?: AttachActionToOptionalParameter): any


/**
 * List the actions attached to a folder
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function attachedScripts(directParameter: any, ): void


/**
 * cause the target process to behave as if the UI element were cancelled
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function cancel(directParameter: any, ): any


/**
 * cause the target process to behave as if the UI element were confirmed
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function confirm(directParameter: any, ): any


/**
 * cause the target process to behave as if the UI element were decremented
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function decrement(directParameter: any, ): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DoFolderActionOptionalParameter {
  /**
   * the folder action message to process
   */
  folderActionCode?: {
    [k: string]: any;
  };
  /**
   * a list of items for the folder action message to process
   */
  withItemList: any;
  /**
   * the new window size for the folder action message to process
   */
  withWindowSize: {
    [k: string]: any;
  };
}

/**
 * Send a folder action code to a folder action script
 * @param directParameter the object for the command
 * 
 */
export declare function doFolderAction(directParameter: any, option?: DoFolderActionOptionalParameter): void


/**
 * Execute an OSA script.
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function doScript(directParameter: {}, ): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface EditActionOfOptionalParameter {
  /**
   * ...or the name of the action to edit
   */
  usingActionName: {
    [k: string]: any;
  };
  /**
   * the index number of the action to edit...
   */
  usingActionNumber: number;
}

/**
 * Edit an action of a folder
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function editActionOf(directParameter: any, option?: EditActionOfOptionalParameter): any


/**
 * cause the target process to behave as if the UI element were incremented
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function increment(directParameter: any, ): any


/**
 * cause the target process to behave as if keys were held down
 * @param directParameter the object for the command
 * 
 */
export declare function keyDown(directParameter: any, ): void


/**
 * cause the target process to behave as if keys were released
 * @param directParameter the object for the command
 * 
 */
export declare function keyUp(directParameter: any, ): void


/**
 * cause the target process to behave as if the UI element were picked
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function pick(directParameter: any, ): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface RemoveActionFromOptionalParameter {
  /**
   * ...or the name of the action to remove
   */
  usingActionName: {
    [k: string]: any;
  };
  /**
   * the index number of the action to remove...
   */
  usingActionNumber: number;
}

/**
 * Remove a folder action from a folder
 * @param directParameter the object for the command
 * @return undefined
 */
export declare function removeActionFrom(directParameter: any, option?: RemoveActionFromOptionalParameter): any
