
// Records
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Reply record for the ‘display alert’ command
 */
export interface AlertReply {
  /**
   * name of button chosen (empty if ‘giving up after’ was supplied and alert timed out)
   */
  buttonReturned?: {
    [k: string]: any;
  };
  /**
   * Did the alert time out? (present only if ‘giving up after’ was supplied)
   */
  gaveUp?: boolean;
}

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Reply record for the ‘display dialog’ command
 */
export interface DialogReply {
  /**
   * name of button chosen (empty if ‘giving up after’ was supplied and dialog timed out)
   */
  buttonReturned?: {
    [k: string]: any;
  };
  /**
   * text entered (present only if ‘default answer’ was supplied)
   */
  textReturned?: {
    [k: string]: any;
  };
  /**
   * Did the dialog time out? (present only if ‘giving up after’ was supplied)
   */
  gaveUp?: boolean;
}

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Reply record for the ‘info for’ command
 */
export interface FileInformation {
  /**
   * the name of the item
   */
  name?: {
    [k: string]: any;
  };
  /**
   * the user-visible name of the item
   */
  displayedName?: {
    [k: string]: any;
  };
  /**
   * the short name (CFBundleName) of the item (if the item is an application)
   */
  shortName?: {
    [k: string]: any;
  };
  /**
   * the name extension of the item (such as “txt”)
   */
  nameExtension?: {
    [k: string]: any;
  };
  /**
   * the item’s bundle identifier (if the item is a package)
   */
  bundleIdentifier?: {
    [k: string]: any;
  };
  /**
   * the item’s type identifier
   */
  typeIdentifier?: {
    [k: string]: any;
  };
  /**
   * the kind of the item
   */
  kind?: {
    [k: string]: any;
  };
  /**
   * the application that normally opens this kind of item
   */
  defaultApplication?: {
    [k: string]: any;
  };
  /**
   * the date the item was created
   */
  creationDate?: {
    [k: string]: any;
  };
  /**
   * the date the item was last modified
   */
  modificationDate?: {
    [k: string]: any;
  };
  /**
   * the file type of the item
   */
  fileType?: {
    [k: string]: any;
  };
  /**
   * the creator type of the item
   */
  fileCreator?: {
    [k: string]: any;
  };
  /**
   * the item’s short version string (from the Finder’s ‘Get Info’ box)
   */
  shortVersion?: {
    [k: string]: any;
  };
  /**
   * the item’s long version string (from the Finder’s ‘Get Info’ box)
   */
  longVersion?: {
    [k: string]: any;
  };
  /**
   * the size of the item in bytes
   */
  size?: number;
  /**
   * Is the item an alias file?
   */
  alias?: boolean;
  /**
   * Is the item a folder?
   */
  folder?: boolean;
  /**
   * Is the item a package (a folder treated as a file?)
   */
  packageFolder?: boolean;
  /**
   * Is the item’s name extension hidden from the user?
   */
  extensionHidden?: boolean;
  /**
   * Is the item visible?
   */
  visible?: boolean;
  /**
   * Is the item locked?
   */
  locked?: boolean;
  /**
   * Is the item currently in use?
   */
  busyStatus?: boolean;
  /**
   * the coordinates of the folder’s window (if the item is a folder)
   */
  folderWindow?: {
    [k: string]: any;
  };
}

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Reply record for the ‘get volume settings’ command
 */
export interface VolumeSettings {
  /**
   * the sound output volume
   */
  outputVolume?: number;
  /**
   * the sound input volume
   */
  inputVolume?: number;
  /**
   * the alert volume (as a percentage of the output volume)
   */
  alertVolume?: number;
  /**
   * Is the sound output muted?
   */
  outputMuted?: boolean;
}

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Reply record for the ‘system info’ command
 */
export interface SystemInformation {
  /**
   * the AppleScript version
   */
  appleScriptVersion?: {
    [k: string]: any;
  };
  /**
   * the AppleScript Studio version
   */
  appleScriptStudioVersion?: {
    [k: string]: any;
  };
  /**
   * the system version
   */
  systemVersion?: {
    [k: string]: any;
  };
  /**
   * the current user’s short name
   */
  shortUserName?: {
    [k: string]: any;
  };
  /**
   * the current user’s long name
   */
  longUserName?: {
    [k: string]: any;
  };
  /**
   * the current user’s ID
   */
  userID?: number;
  /**
   * the current user’s locale
   */
  userLocale?: {
    [k: string]: any;
  };
  /**
   * the current user’s home directory
   */
  homeDirectory?: {
    [k: string]: any;
  };
  /**
   * the boot volume
   */
  bootVolume?: {
    [k: string]: any;
  };
  /**
   * the computer name
   */
  computerName?: {
    [k: string]: any;
  };
  /**
   * the host name
   */
  hostName?: {
    [k: string]: any;
  };
  /**
   * the IPv4 address
   */
  IPv4Address?: {
    [k: string]: any;
  };
  /**
   * the primary Ethernet address
   */
  primaryEthernetAddress?: {
    [k: string]: any;
  };
  /**
   * the CPU type
   */
  CPUType?: {
    [k: string]: any;
  };
  /**
   * the clock speed of the CPU in MHz
   */
  CPUSpeed?: number;
  /**
   * the amount of physical RAM in MB
   */
  physicalMemory?: number;
}

// Functions


/**
 * Beep 1 or more times
 * @param directParameter number of times to beep
 * 
 */
export declare function beep(directParameter?: number, ): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseApplicationOptionalParameter {
  /**
   * the dialog window title
   */
  withTitle: {
    [k: string]: any;
  };
  /**
   * the prompt to be displayed in the dialog box
   */
  withPrompt: {
    [k: string]: any;
  };
  /**
   * Allow multiple items to be selected? (default is false)
   */
  multipleSelectionsAllowed: boolean;
  /**
   * the desired type of result. May be application (the default) or alias.
   */
  as: {
    [k: string]: any;
  };
}

/**
 * Choose an application on this machine or the network

 * @return the chosen application
 */
export declare function chooseApplication(option?: ChooseApplicationOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseColorOptionalParameter {
  /**
   * the default color
   */
  defaultColor: {
    [k: string]: any;
  };
}

/**
 * Choose a color

 * @return the chosen color
 */
export declare function chooseColor(option?: ChooseColorOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseFileOptionalParameter {
  /**
   * the prompt to be displayed in the dialog box
   */
  withPrompt: {
    [k: string]: any;
  };
  /**
   * a list of file types or type identifiers. Only files of the specified types will be selectable.
   */
  ofType: {
    [k: string]: any;
  };
  /**
   * the default file location
   */
  defaultLocation: {
    [k: string]: any;
  };
  /**
   * Show invisible files and folders? (default is false)
   */
  invisibles: boolean;
  /**
   * Allow multiple items to be selected? (default is false)
   */
  multipleSelectionsAllowed: boolean;
  /**
   * Show the contents of packages? (Packages will be treated as folders. Default is false.)
   */
  showingPackageContents: boolean;
}

/**
 * Choose a file on a disk or server

 * @return the chosen file
 */
export declare function chooseFile(option?: ChooseFileOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseFileNameOptionalParameter {
  /**
   * the prompt to be displayed in the dialog box
   */
  withPrompt: {
    [k: string]: any;
  };
  /**
   * the default name for the new file
   */
  defaultName: {
    [k: string]: any;
  };
  /**
   * the default file location
   */
  defaultLocation: {
    [k: string]: any;
  };
}

/**
 * Get a new file reference from the user, without creating the file

 * @return the file the user specified
 */
export declare function chooseFileName(option?: ChooseFileNameOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseFolderOptionalParameter {
  /**
   * the prompt to be displayed in the dialog box
   */
  withPrompt: {
    [k: string]: any;
  };
  /**
   * the default folder location
   */
  defaultLocation: {
    [k: string]: any;
  };
  /**
   * Show invisible files and folders? (default is false)
   */
  invisibles: boolean;
  /**
   * Allow multiple items to be selected? (default is false)
   */
  multipleSelectionsAllowed: boolean;
  /**
   * Show the contents of packages? (Packages will be treated as folders. Default is false.)
   */
  showingPackageContents: boolean;
}

/**
 * Choose a folder on a disk or server

 * @return the chosen folder
 */
export declare function chooseFolder(option?: ChooseFolderOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseFromListOptionalParameter {
  /**
   * the dialog window title
   */
  withTitle: {
    [k: string]: any;
  };
  /**
   * the prompt to be displayed in the dialog box
   */
  withPrompt: {
    [k: string]: any;
  };
  /**
   * a list of items to initially select (an empty list if no selection)
   */
  defaultItems: {
    [k: string]: any;
  };
  /**
   * the name of the OK button
   */
  OKButtonName: {
    [k: string]: any;
  };
  /**
   * the name of the Cancel button
   */
  cancelButtonName: {
    [k: string]: any;
  };
  /**
   * Allow multiple items to be selected?
   */
  multipleSelectionsAllowed: boolean;
  /**
   * Can the user make no selection and then choose OK?
   */
  emptySelectionAllowed: boolean;
}

/**
 * Choose one or more items from a list
 * @param directParameter a list of items to display
 * @return the list of selected items
 */
export declare function chooseFromList(directParameter: {}, option?: ChooseFromListOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseRemoteApplicationOptionalParameter {
  /**
   * the dialog window title
   */
  withTitle: {
    [k: string]: any;
  };
  /**
   * the prompt to be displayed above the list of applications
   */
  withPrompt: {
    [k: string]: any;
  };
}

/**
 * Choose a running application on a remote machine or on this machine

 * @return the chosen application
 */
export declare function chooseRemoteApplication(option?: ChooseRemoteApplicationOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ChooseUrlOptionalParameter {
  /**
   * which network services to show
   */
  showing: {
    [k: string]: any;
  };
  /**
   * Allow user to type in a URL?
   */
  editableURL: boolean;
}

/**
 * Choose a service on the Internet

 * @return the chosen URL
 */
export declare function chooseURL(option?: ChooseUrlOptionalParameter): any


/**
 * Pause for a fixed amount of time
 * @param directParameter the number of seconds to delay (default is 0)
 * 
 */
export declare function delay(directParameter?: number, ): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DisplayAlertOptionalParameter {
  /**
   * the explanatory message (will be displayed in small system font)
   */
  message: {
    [k: string]: any;
  };
  /**
   * the type of alert (default is informational)
   */
  as: {
    [k: string]: any;
  };
  /**
   * a list of up to three button names
   */
  buttons: {
    [k: string]: any;
  };
  /**
   * the name or number of the default button
   */
  defaultButton: {
    [k: string]: any;
  };
  /**
   * the name or number of the cancel button
   */
  cancelButton: {
    [k: string]: any;
  };
  /**
   * number of seconds to wait before automatically dismissing the alert
   */
  givingUpAfter: number;
}

/**
 * Display an alert
 * @param directParameter the alert text (will be displayed in emphasized system font)
 * @return a record containing the button clicked
 */
export declare function displayAlert(directParameter: string, option?: DisplayAlertOptionalParameter): AlertReply

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DisplayDialogOptionalParameter {
  /**
   * the default editable text
   */
  defaultAnswer: {
    [k: string]: any;
  };
  /**
   * Should editable text be displayed as bullets? (default is false)
   */
  hiddenAnswer: boolean;
  /**
   * a list of up to three button names
   */
  buttons: {
    [k: string]: any;
  };
  /**
   * the name or number of the default button
   */
  defaultButton: {
    [k: string]: any;
  };
  /**
   * the name or number of the cancel button
   */
  cancelButton: {
    [k: string]: any;
  };
  /**
   * the dialog window title
   */
  withTitle: {
    [k: string]: any;
  };
  /**
   * …or an alias or file reference to a ‘.icns’ file
   */
  withIcon: {
    [k: string]: any;
  };
  /**
   * number of seconds to wait before automatically dismissing the dialog
   */
  givingUpAfter: number;
}

/**
 * Display a dialog box, optionally requesting user input
 * @param directParameter the text to display in the dialog box
 * @return a record containing the button clicked and text entered (if any)
 */
export declare function displayDialog(directParameter: string, option?: DisplayDialogOptionalParameter): DialogReply

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DisplayNotificationOptionalParameter {
  /**
   * the title of the notification (default is the name of the calling application).
   */
  withTitle: {
    [k: string]: any;
  };
  /**
   * the subtitle of the notification
   */
  subtitle: {
    [k: string]: any;
  };
  /**
   * the name of the sound to play
   */
  soundName: {
    [k: string]: any;
  };
}

/**
 * Display a notification. At least one of the body text and the title must be specified.
 * @param directParameter the body text of the notification
 * 
 */
export declare function displayNotification(directParameter?: string, option?: DisplayNotificationOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SayOptionalParameter {
  /**
   * the text to display in the feedback window (if different). Ignored unless Speech Recognition is on.
   */
  displaying: {
    [k: string]: any;
  };
  /**
   * the voice to speak with. (Default is the system voice.)
   */
  using: {
    [k: string]: any;
  };
  /**
   * the rate of speech in words per minute. Average human speech occurs at a rate of 180 to 220 words per minute. (Default depends on the voice used. If “using” is not given, the system speaking rate is the default.)
   */
  speakingRate: number;
  /**
   * the base pitch frequency, a real number from 0 to 127. Values correspond to MIDI note values, where 60 is equal to middle C. Typical pitches range from around 30 to 40 for a low-pitched male voice to perhaps 55 to 65 for a high-pitched child’s voice.
   */
  pitch: number;
  /**
   * the pitch modulation, a real number from 0 to 127. A value of 0 corresponds to a monotone in which all speech is at the base speech pitch. Given a pitch value of 46, a modulation of 2 means the widest range of pitches would be 44 to 48.
   */
  modulation: number;
  /**
   * the volume, a real number from 0 to 1 (default is the system volume).
   */
  volume: number;
  /**
   * stop any current speech before starting (default is false). When false, “say” waits for previous speech commands to complete before beginning to speak.
   */
  stoppingCurrentSpeech: boolean;
  /**
   * wait for speech to complete before returning (default is true).
   */
  waitingUntilCompletion: boolean;
  /**
   * the alias, file reference or path string of an AIFF file (existing or not) to contain the sound output.
   */
  savingTo: any;
}

/**
 * Speak the given text
 * @param directParameter the text to speak, which can include intonation characters
 * 
 */
export declare function say(directParameter: string, option?: SayOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface InfoForOptionalParameter {
  /**
   * Return the size of the file or folder? (default is true)
   */
  size: boolean;
}

/**
 * Return information for a file or folder
 * @param directParameter an alias or file reference to the file or folder
 * @return a record containing the information for the specified file or folder
 */
export declare function infoFor(directParameter: any, option?: InfoForOptionalParameter): FileInformation


/**
 * Return a list of the currently mounted volumes

 * @return a list of the currently mounted volumes.
 */
export declare function listDisks(): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ListFolderOptionalParameter {
  /**
   * List invisible files? (default is true)
   */
  invisibles: boolean;
}

/**
 * Return the contents of a specified folder
 * @param directParameter an alias or file reference to the folder
 * @return a list of the items in the specified folder
 */
export declare function listFolder(directParameter: any, option?: ListFolderOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface MountVolumeOptionalParameter {
  /**
   * the server on which the volume resides; omit if URL path provided
   */
  onServer?: {
    [k: string]: any;
  };
  /**
   * the AppleTalk zone in which the server resides; omit if URL path provided
   */
  inAppleTalkZone: {
    [k: string]: any;
  };
  /**
   * the user name with which to log in to the server; omit for guest access
   */
  asUserName: {
    [k: string]: any;
  };
  /**
   * the password for the user name; omit for guest access
   */
  withPassword: {
    [k: string]: any;
  };
}

/**
 * Mount the specified server volume
 * @param directParameter the name or URL path (e.g. ‘afp://server/volume/’) of the volume to mount
 * @return a specifier for the mounted volume
 */
export declare function mountVolume(directParameter: string, option?: MountVolumeOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface PathToOptionalParameter {
  /**
   * the type to return: alias or string (default is alias)
   */
  as: {
    [k: string]: any;
  };
}

/**
 * Return the full path to the specified application or script
 * @param directParameter the item path to return; e.g., current application, frontmost application, application “AppName”, me, it
 * @return the path to the specified item
 */
export declare function pathTo(directParameter: {}, option?: PathToOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface PathToOptionalParameter {
  /**
   * where to look for the indicated folder
   */
  from: {
    [k: string]: any;
  };
  /**
   * the type to return: alias or string (default is alias)
   */
  as: {
    [k: string]: any;
  };
  /**
   * Create the folder if it doesn’t exist? (default is true)
   */
  folderCreation: boolean;
}

/**
 * Return the full path to the specified folder
 * @param directParameter the folder to return
 * @return the path to the specified folder
 */
export declare function pathTo(directParameter: any, option?: PathToOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface PathToResourceOptionalParameter {
  /**
   * an alias or file reference to the bundle containing the resource (default is the target application or current script bundle)
   */
  inBundle: {
    [k: string]: any;
  };
  /**
   * the name of a subdirectory in the bundle’s “Resources” directory
   */
  inDirectory: {
    [k: string]: any;
  };
}

/**
 * Return the full path to the specified resource
 * @param directParameter the name of the requested resource
 * @return the path to the resource
 */
export declare function pathToResource(directParameter: string, option?: PathToResourceOptionalParameter): any


/**
 * Convert a number to a character
 * @param directParameter the code point of the specified character
 * @return the character
 */
export declare function ASCIICharacter(directParameter: number, ): string


/**
 * Convert a character to a number
 * @param directParameter the character
 * @return the code point of the specified character
 */
export declare function ASCIINumber(directParameter: string, ): number

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface LocalizedStringOptionalParameter {
  /**
   * the name of the strings file excluding the “.strings” suffix (default is “Localizable”)
   */
  fromTable: {
    [k: string]: any;
  };
  /**
   * an alias or file reference to the bundle containing the strings file (default is the current application/script bundle)
   */
  inBundle: {
    [k: string]: any;
  };
}

/**
 * Return the localized string for the specified key
 * @param directParameter the key
 * @return the localized string
 */
export declare function localizedString(directParameter: string, option?: LocalizedStringOptionalParameter): string

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface OffsetOptionalParameter {
  /**
   * the source text to find the position of
   */
  of?: {
    [k: string]: any;
  };
  /**
   * the target text to search in
   */
  in?: {
    [k: string]: any;
  };
}

/**
 * Find one piece of text inside another

 * @return the position of the source text in the target, or 0 if not found
 */
export declare function offset(option?: OffsetOptionalParameter): number

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SummarizeOptionalParameter {
  /**
   * the number of sentences desired in the summary
   */
  in: number;
}

/**
 * Summarize the specified text or text file
 * @param directParameter the text (or an alias to a text file) to summarize
 * @return a summarized version of the text or file
 */
export declare function summarize(directParameter: {}, option?: SummarizeOptionalParameter): string


/**
 * Place data on an application’s clipboard. Use inside a ‘tell’ block and activate the application first
 * @param directParameter the data to place on the clipboard
 * 
 */
export declare function setTheClipboardTo(directParameter: any, ): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface TheClipboardOptionalParameter {
  /**
   * the type of data desired
   */
  as: {
    [k: string]: any;
  };
}

/**
 * Return the contents of an application’s clipboard. Use in a ‘tell’ block after activating the application

 * @return the data
 */
export declare function theClipboard(option?: TheClipboardOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ClipboardInfoOptionalParameter {
  /**
   * restricts to information about only this data type
   */
  for: {
    [k: string]: any;
  };
}

/**
 * Return information about the clipboard

 * @return a list of {data type, size} for each type of data on the clipboard
 */
export declare function clipboardInfo(option?: ClipboardInfoOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface OpenForAccessOptionalParameter {
  /**
   * whether to allow writing to the file.
   */
  writePermission: boolean;
}

/**
 * Open a disk file for the read and write commands
 * @param directParameter the file or alias to open for access. If the file does not exist, a new file is created.
 * @return a file reference number; use for ‘read’, ‘write’, and ‘close access’
 */
export declare function openForAccess(directParameter: any, option?: OpenForAccessOptionalParameter): number


/**
 * Close a file that was opened for access
 * @param directParameter the file reference number, alias, or file reference of the file to close
 * 
 */
export declare function closeAccess(directParameter: any, ): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ReadOptionalParameter {
  /**
   * starting from this position; if omitted, start at last position read from
   */
  from: number;
  /**
   * the number of bytes to read from current position; if omitted, read until the end of the file…
   */
  for: number;
  /**
   * …or stop at this position…
   */
  to: number;
  /**
   * …or read up to but not including this character…
   */
  before: {
    [k: string]: any;
  };
  /**
   * …or read up to and including this character
   */
  until: {
    [k: string]: any;
  };
  /**
   * the value that separates items to read…
   */
  usingDelimiter: {
    [k: string]: any;
  };
  /**
   * …or a list of values that separate items to read
   */
  usingDelimiters: {
    [k: string]: any;
  };
  /**
   * the form in which to read and return data
   */
  as: {
    [k: string]: any;
  };
}

/**
 * Read data from a file that has been opened for access
 * @param directParameter the file reference number, alias, or file reference of the file to read
 * @return the data read from the file
 */
export declare function read(directParameter: any, option?: ReadOptionalParameter): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface WriteOptionalParameter {
  /**
   * the file reference number, alias, or file reference of the file to write to
   */
  to?: any;
  /**
   * start writing at this position in the file
   */
  startingAt: number;
  /**
   * the number of bytes to write; if not specified, write all the data provided
   */
  for: number;
  /**
   * how to write the data: as text, data, list, etc.
   */
  as: {
    [k: string]: any;
  };
}

/**
 * Write data to a file that was opened for access with write permission
 * @param directParameter the data to write to the file
 * 
 */
export declare function write(directParameter: any, option?: WriteOptionalParameter): void


/**
 * Return the length, in bytes, of a file
 * @param directParameter a file reference number, alias, or file reference of a file
 * @return the total number of bytes in the file
 */
export declare function getEof(directParameter: any, ): number

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SetEofOptionalParameter {
  /**
   * the new length of the file, in bytes. Any data beyond this position is lost.
   */
  to?: number;
}

/**
 * Set the length, in bytes, of a file
 * @param directParameter a file reference number, alias, or file reference of a file
 * 
 */
export declare function setEof(directParameter: any, option?: SetEofOptionalParameter): void


/**
 * Return a script object loaded from a specified file
 * @param directParameter an alias or file reference to the file containing the script object
 * @return the script object. You can get this object’s properties or call its handlers as if it were a local script object.
 */
export declare function loadScript(directParameter: any, ): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface StoreScriptOptionalParameter {
  /**
   * an alias or file reference to the file to store the script object in
   */
  in: {
    [k: string]: any;
  };
  /**
   * control display of the Save As dialog
   */
  replacing: {
    [k: string]: any;
  };
}

/**
 * Store a script object into a file
 * @param directParameter the script object to store
 * 
 */
export declare function storeScript(directParameter?: any, option?: StoreScriptOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface RunScriptOptionalParameter {
  /**
   * a list of parameters
   */
  withParameters: {
    [k: string]: any;
  };
  /**
   * the scripting component to use; default is the current scripting component
   */
  in: {
    [k: string]: any;
  };
}

/**
 * Run a specified script or script file
 * @param directParameter the script text (or an alias or file reference to a script file) to run
 * @return the result of running the script
 */
export declare function runScript(directParameter: any, option?: RunScriptOptionalParameter): any


/**
 * Return a list of all scripting components (e.g. AppleScript)

 * @return a list of installed scripting components
 */
export declare function scriptingComponents(): void


/**
 * Return the current date and time

 * @return the current date and time. Use ‘month of (current date)’, etc. to get individual parts.
 */
export declare function currentDate(): any

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DoShellScriptOptionalParameter {
  /**
   * the desired type of result; default is text (UTF-8)
   */
  as: {
    [k: string]: any;
  };
  /**
   * execute the command as the administrator
   */
  administratorPrivileges: boolean;
  /**
   * use this administrator account to avoid a password dialog (If this parameter is specified, the “password” parameter must also be specified.)
   */
  userName: {
    [k: string]: any;
  };
  /**
   * use this administrator password to avoid a password dialog
   */
  password: {
    [k: string]: any;
  };
  /**
   * the prompt to be displayed in the password dialog when the name and password are not specified or are incorrect
   */
  withPrompt: {
    [k: string]: any;
  };
  /**
   * change all line endings to Mac-style and trim a trailing one (default true)
   */
  alteringLineEndings: boolean;
}

/**
 * Execute a shell script using the ‘sh’ shell
 * @param directParameter the shell script to execute.
 * @return the command output
 */
export declare function doShellScript(directParameter: string, option?: DoShellScriptOptionalParameter): string


/**
 * Get the sound output and input volume settings

 * @return a record containing the sound output and input volume settings
 */
export declare function getVolumeSettings(): VolumeSettings

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface RandomNumberOptionalParameter {
  /**
   * the lowest number to return (default is 0.0)
   */
  from: number;
  /**
   * the highest number to return (default is 1.0)
   */
  to: number;
  /**
   * a starting point for a repeatable sequence of random numbers. A value of 0 will use a random seed.
   */
  withSeed: number;
}

/**
 * Generate a random number
 * @param directParameter the upper limit (Default is 1.0. If this parameter is specified, the “from” and “to” parameters will be ignored.)
 * @return a number between the “from” and “to” limits, including limit values. If all specified limits are integers, the result is an integer. Otherwise, the result is a real.
 */
export declare function randomNumber(directParameter?: number, option?: RandomNumberOptionalParameter): number

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface RoundOptionalParameter {
  /**
   * the rounding direction; if omitted, rounds to nearest. “to nearest” rounds .5 cases to the nearest even integer in order to decrease cumulative errors. To always round .5 away from zero, use “as taught in school.”
   */
  rounding: {
    [k: string]: any;
  };
}

/**
 * Round number to integer
 * @param directParameter the number to round
 * @return the rounded value
 */
export declare function round(directParameter: any, option?: RoundOptionalParameter): number

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SetVolumeOptionalParameter {
  /**
   * the sound output volume, an integer from 0 to 100
   */
  outputVolume: number;
  /**
   * the sound input volume, an integer from 0 to 100
   */
  inputVolume: number;
  /**
   * the alert volume, an integer from 0 to 100
   */
  alertVolume: number;
  /**
   * Should the sound output be muted?
   */
  outputMuted: boolean;
}

/**
 * Set the sound output and/or input volume
 * @param directParameter the sound output volume, a real number from 0 to 7 (This parameter is deprecated; if specified, all other parameters will be ignored.)
 * 
 */
export declare function setVolume(directParameter?: number, option?: SetVolumeOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SystemAttributeOptionalParameter {
  /**
   * test specific bits of response (ignored for environment variables)
   */
  has: number;
}

/**
 * Test attributes of this computer
 * @param directParameter the attribute to test (either a “Gestalt” value or a shell environment variable).
 * @return the result of the query (or a list of all environment variables, if no attribute is provided)
 */
export declare function systemAttribute(directParameter?: any, option?: SystemAttributeOptionalParameter): any


/**
 * Get information about the system

 * @return a record containing the system information
 */
export declare function systemInfo(): SystemInformation


/**
 * Return the difference between local time and GMT (Universal Time)

 * @return the difference between current time zone and Universal Time, in seconds
 */
export declare function timeToGMT(): number


/**
 * Called after a folder has been opened into a window
 * @param directParameter the folder that was opened
 * 
 */
export declare function openingFolder(directParameter: any, ): void


/**
 * Called after a folder window has been closed
 * @param directParameter the folder that was closed
 * 
 */
export declare function closingFolderWindowFor(directParameter: any, ): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface MovingFolderWindowForOptionalParameter {
  /**
   * the previous coordinates of folder window (you can get the new coordinates from the Finder)
   */
  from?: {
    [k: string]: any;
  };
}

/**
 * Called after a folder window has been moved or resized
 * @param directParameter the folder whose window was moved or resized
 * 
 */
export declare function movingFolderWindowFor(directParameter: any, option?: MovingFolderWindowForOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface AddingFolderItemsToOptionalParameter {
  /**
   * a list of the items the folder received
   */
  afterReceiving?: {
    [k: string]: any;
  };
}

/**
 * Called after new items have been added to a folder
 * @param directParameter Folder receiving the new items
 * 
 */
export declare function addingFolderItemsTo(directParameter: any, option?: AddingFolderItemsToOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface RemovingFolderItemsFromOptionalParameter {
  /**
   * a list of the items the folder lost. For permanently deleted items, only the names (in strings) are provided.
   */
  afterLosing?: {
    [k: string]: any;
  };
}

/**
 * Called after items have been removed from a folder
 * @param directParameter the folder losing the items
 * 
 */
export declare function removingFolderItemsFrom(directParameter: any, option?: RemovingFolderItemsFromOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface OpenLocationOptionalParameter {
  /**
   * Should error conditions be reported in a dialog?
   */
  errorReporting: boolean;
}

/**
 * Opens a URL with the appropriate program
 * @param directParameter the URL to open
 * 
 */
export declare function openLocation(directParameter?: string, option?: OpenLocationOptionalParameter): void

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface HandleCgiRequestOptionalParameter {
  /**
   * the data for the GET method or data after the ‘?’ in a POST method
   */
  searchingFor: {
    [k: string]: any;
  };
  /**
   * the POST arguments
   */
  withPostedData: {
    [k: string]: any;
  };
  /**
   * the MIME content type of POST arguments
   */
  ofContentType: {
    [k: string]: any;
  };
  /**
   * either ‘GET’ or ‘POST’
   */
  usingAccessMethod: {
    [k: string]: any;
  };
  /**
   * the IP address of the entity making the request
   */
  fromAddress: {
    [k: string]: any;
  };
  /**
   * the user name associated with the request
   */
  fromUser: {
    [k: string]: any;
  };
  /**
   * the password sent with the request
   */
  usingPassword: {
    [k: string]: any;
  };
  /**
   * additional information about the user, usually the email address
   */
  withUserInfo: {
    [k: string]: any;
  };
  /**
   * the name of the server application sending this request
   */
  fromServer: {
    [k: string]: any;
  };
  /**
   * the IP port number of the server
   */
  viaPort: {
    [k: string]: any;
  };
  /**
   * the path to the script executing this CGI, in URL form
   */
  executingBy: {
    [k: string]: any;
  };
  /**
   * the URL of the page the client used to link to the CGI
   */
  referredBy: {
    [k: string]: any;
  };
  /**
   * the name of the client software
   */
  fromBrowser: {
    [k: string]: any;
  };
  /**
   * the path to the file or CGI
   */
  usingAction: {
    [k: string]: any;
  };
  /**
   * either PREPROCESSOR, POSTPROCESSOR, CGI, or ACGI
   */
  ofActionType: {
    [k: string]: any;
  };
  /**
   * the Internet address of the client
   */
  fromClientIPAddress: {
    [k: string]: any;
  };
  /**
   * the full request as sent to the server
   */
  withFullRequest: {
    [k: string]: any;
  };
  /**
   * the ID of the connection from the server to the client
   */
  withConnectionID: number;
  /**
   * the URL of the root folder of the virtual host
   */
  fromVirtualHost: {
    [k: string]: any;
  };
}

/**
 * Sent to a script to process a Common Gateway Interface request
 * @param directParameter the path of the URL
 * @return An HTML page resulting from the CGI execution
 */
export declare function handleCGIRequest(directParameter: string, option?: HandleCgiRequestOptionalParameter): any
